ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f1xx_hal_adc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_ADC_Init,"ax",%progbits
  18              		.align	1
  19              		.global	HAL_ADC_Init
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	HAL_ADC_Init:
  25              	.LFB65:
  26              		.file 1 "Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c"
   1:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
   2:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ******************************************************************************
   3:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @file    stm32f1xx_hal_adc.c
   4:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @author  MCD Application Team
   5:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   6:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC)
   7:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          peripheral:
   8:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Initialization and Configuration of ADC
  10:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *           + Operation functions
  11:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Start, stop, get result of conversions of regular
  12:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *                group, using 3 possible modes: polling, interruption or DMA.
  13:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *           + Control functions
  14:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Channels configuration on regular group
  15:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Channels configuration on injected group
  16:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Analog Watchdog configuration
  17:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *           + State functions
  18:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ ADC state machine management
  19:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Interrupts and flags management
  20:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          Other functions (extended functions) are available in file 
  21:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          "stm32f1xx_hal_adc_ex.c".
  22:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
  23:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   @verbatim
  24:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ==============================================================================
  25:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                      ##### ADC peripheral features #####
  26:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ==============================================================================
  27:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   [..]
  28:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) 12-bit resolution
  29:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  30:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Interrupt generation at the end of regular conversion, end of injected
  31:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       conversion, and in case of analog watchdog or overrun events.
  32:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 2


  33:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Single and continuous conversion modes.
  34:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  35:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Scan mode for conversion of several channels sequentially.
  36:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  37:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Data alignment with in-built data coherency.
  38:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  39:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Programmable sampling time (channel wise)
  40:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  41:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) ADC conversion of regular group and injected group.
  42:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  43:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) External trigger (timer or EXTI) 
  44:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       for both regular and injected groups.
  45:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  46:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) DMA request generation for transfer of conversions data of regular group.
  47:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  48:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Multimode Dual mode (available on devices with 2 ADCs or more).
  49:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  50:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Configurable DMA data storage in Multimode Dual mode (available on devices
  51:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       with 2 DCs or more).
  52:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  53:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Configurable delay between conversions in Dual interleaved mode (available 
  54:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       on devices with 2 DCs or more).
  55:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  56:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) ADC calibration
  57:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  58:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) ADC supply requirements: 2.4 V to 3.6 V at full speed and down to 1.8 V at 
  59:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       slower speed.
  60:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  61:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) ADC input range: from Vref- (connected to Vssa) to Vref+ (connected to 
  62:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       Vdda or to an external voltage reference).
  63:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  64:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  65:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                      ##### How to use this driver #####
  66:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ==============================================================================
  67:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
  68:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  69:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      *** Configuration of top level parameters related to ADC ***
  70:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      ============================================================
  71:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
  72:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  73:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Enable the ADC interface
  74:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (++) As prerequisite, ADC clock must be configured at RCC top level.
  75:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****            Caution: On STM32F1, ADC clock frequency max is 14MHz (refer
  76:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                     to device datasheet).
  77:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                     Therefore, ADC clock prescaler must be configured in 
  78:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                     function of ADC clock source frequency to remain below
  79:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                     this maximum frequency.
  80:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) One clock setting is mandatory:
  81:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC clock (core clock, also possibly conversion clock).
  82:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              (+++) Example:
  83:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                    Into HAL_ADC_MspInit() (recommended code location) or with
  84:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                    other device clock parameters configuration:
  85:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) RCC_PeriphCLKInitTypeDef  PeriphClkInit;
  86:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) __ADC1_CLK_ENABLE();
  87:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  88:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
  89:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 3


  90:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  91:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) ADC pins configuration
  92:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Enable the clock for the ADC GPIOs
  93:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_ENABLE()
  94:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Configure these ADC pins in analog mode
  95:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_GPIO_Init()
  96:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  97:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
  98:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Configure the NVIC for ADC
  99:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               into the function of corresponding ADC interruption vector 
 102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               ADCx_IRQHandler().
 103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Configure the DMA (DMA channel, mode normal or circular, ...)
 106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_DMA_Init().
 107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Configure the NVIC for DMA
 108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               into the function of corresponding DMA interruption vector 
 111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               DMAx_Channelx_IRQHandler().
 112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      *** Configuration of ADC, groups regular/injected, channels parameters ***
 114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      ==========================================================================
 115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Configure the ADC parameters (resolution, data alignment, ...)
 118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         and regular group parameters (conversion trigger, sequencer, ...)
 119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADC_Init().
 120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Configure the channels for regular group parameters (channel number, 
 122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         channel rank into sequencer, ..., into regular group)
 123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADC_ConfigChannel().
 124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, configure the injected group parameters (conversion trigger, 
 126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         sequencer, ..., of injected group)
 127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         and the channels for injected group parameters (channel number, 
 128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         channel rank into sequencer, ..., into injected group)
 129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADCEx_InjectedConfigChannel().
 130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, configure the analog watchdog parameters (channels
 132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         monitored, thresholds, ...)
 133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADC_AnalogWDGConfig().
 134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, for devices with several ADC instances: configure the 
 136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         multimode parameters
 137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADCEx_MultiModeConfigChannel().
 138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      *** Execution of ADC conversions ***
 140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      ====================================
 141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, perform an automatic ADC calibration to improve the
 144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         conversion accuracy
 145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADCEx_Calibration_Start().
 146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 4


 147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) ADC driver can be used among three modes: polling, interruption,
 148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         transfer by DMA.
 149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) ADC conversion by polling:
 151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Start()
 153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion 
 154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_PollForConversion()
 155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedPollForConversion() )
 156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Retrieve conversion results 
 157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedGetValue() )
 159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Stop()
 161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) ADC conversion by interruption: 
 163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Start_IT()
 165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback()
 167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (this function must be implemented in user program)
 168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedConvCpltCallback() )
 169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Retrieve conversion results 
 170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedGetValue() )
 172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Stop_IT()
 174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) ADC conversion with transfer by DMA:
 176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Start_DMA()
 178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback() or HAL_ADC_ConvHalfCpltCallback()
 180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (these functions must be implemented in user program)
 181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Conversion results are automatically transferred by DMA into
 182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 destination variable address.
 183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Stop_DMA()
 185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) For devices with several ADCs: ADC multimode conversion 
 187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              with transfer by DMA:
 188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral (slave) and start conversions
 189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Start()
 190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral (master) and start conversions
 191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADCEx_MultiModeStart_DMA()
 192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback() or HAL_ADC_ConvHalfCpltCallback()
 194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (these functions must be implemented in user program)
 195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Conversion results are automatically transferred by DMA into
 196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 destination variable address.
 197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral (master)
 198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADCEx_MultiModeStop_DMA()
 199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral (slave)
 200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Stop_IT()
 201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 5


 204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (@) Callback functions must be implemented in user program:
 205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADC_ErrorCallback()
 206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADC_LevelOutOfWindowCallback() (callback of analog watchdog)
 207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADC_ConvCpltCallback()
 208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADC_ConvHalfCpltCallback
 209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADCEx_InjectedConvCpltCallback()
 210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      *** Deinitialization of ADC ***
 212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      ============================================================
 213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Disable the ADC interface
 216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (++) ADC clock can be hard reset and disabled at RCC top level.
 217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) Hard reset of ADC peripherals
 218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              using macro __ADCx_FORCE_RESET(), __ADCx_RELEASE_RESET().
 219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) ADC clock disable
 220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              using the equivalent macro/functions as configuration step.
 221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              (+++) Example:
 222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                    Into HAL_ADC_MspDeInit() (recommended code location) or with
 223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                    other device clock parameters configuration:
 224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC
 225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) PeriphClkInit.AdcClockSelection = RCC_ADCPLLCLK2_OFF
 226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit)
 227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) ADC pins configuration
 229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Disable the clock for the ADC GPIOs
 230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_DISABLE()
 231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Disable the NVIC for ADC
 234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Deinitialize the DMA
 238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_DMA_Init().
 239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Disable the NVIC for DMA
 240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
 243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     *** Callback registration ***
 245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     =============================================
 246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
 247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      The compilation flag USE_HAL_ADC_REGISTER_CALLBACKS, when set to 1,
 249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      allows the user to configure dynamically the driver callbacks.
 250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      Use Functions @ref HAL_ADC_RegisterCallback()
 251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      to register an interrupt callback.
 252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
 253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      Function @ref HAL_ADC_RegisterCallback() allows to register following callbacks:
 255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) ConvCpltCallback               : ADC conversion complete callback
 256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) ConvHalfCpltCallback           : ADC conversion DMA half-transfer callback
 257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) LevelOutOfWindowCallback       : ADC analog watchdog 1 callback
 258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) ErrorCallback                  : ADC error callback
 259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) InjectedConvCpltCallback       : ADC group injected conversion complete callback
 260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) MspInitCallback                : ADC Msp Init callback
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 6


 261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) MspDeInitCallback              : ADC Msp DeInit callback
 262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      This function takes as parameters the HAL peripheral handle, the Callback ID
 263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      and a pointer to the user callback function.
 264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
 265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      Use function @ref HAL_ADC_UnRegisterCallback to reset a callback to the default
 267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      weak function.
 268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
 269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      @ref HAL_ADC_UnRegisterCallback takes as parameters the HAL peripheral handle,
 271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      and the Callback ID.
 272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      This function allows to reset following callbacks:
 273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) ConvCpltCallback               : ADC conversion complete callback
 274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) ConvHalfCpltCallback           : ADC conversion DMA half-transfer callback
 275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) LevelOutOfWindowCallback       : ADC analog watchdog 1 callback
 276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) ErrorCallback                  : ADC error callback
 277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) InjectedConvCpltCallback       : ADC group injected conversion complete callback
 278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) MspInitCallback                : ADC Msp Init callback
 279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) MspDeInitCallback              : ADC Msp DeInit callback
 280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      By default, after the @ref HAL_ADC_Init() and when the state is @ref HAL_ADC_STATE_RESET
 283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      all callbacks are set to the corresponding weak functions:
 284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      examples @ref HAL_ADC_ConvCpltCallback(), @ref HAL_ADC_ErrorCallback().
 285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      Exception done for MspInit and MspDeInit functions that are
 286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      reset to the legacy weak functions in the @ref HAL_ADC_Init()/ @ref HAL_ADC_DeInit() only when
 287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      these callbacks are null (not registered beforehand).
 288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
 289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      If MspInit or MspDeInit are not null, the @ref HAL_ADC_Init()/ @ref HAL_ADC_DeInit()
 291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      keep and use the user MspInit/MspDeInit callbacks (registered beforehand) whatever the state.
 292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      Callbacks can be registered/unregistered in @ref HAL_ADC_STATE_READY state only.
 295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      Exception done MspInit/MspDeInit functions that can be registered/unregistered
 296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      in @ref HAL_ADC_STATE_READY or @ref HAL_ADC_STATE_RESET state,
 297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
 298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
 299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      Then, the user first registers the MspInit/MspDeInit user callbacks
 301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      using @ref HAL_ADC_RegisterCallback() before calling @ref HAL_ADC_DeInit()
 302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      or @ref HAL_ADC_Init() function.
 303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      When the compilation flag USE_HAL_ADC_REGISTER_CALLBACKS is set to 0 or
 306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      not defined, the callback registration feature is not available and all callbacks
 307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      are set to the corresponding weak functions.
 308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   @endverbatim
 310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ******************************************************************************
 311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @attention
 312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
 313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
 314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * All rights reserved.</center></h2>
 315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
 316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * the "License"; You may not use this file except in compliance with the
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 7


 318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * License. You may obtain a copy of the License at:
 319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *                        opensource.org/licenses/BSD-3-Clause
 320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
 321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ******************************************************************************
 322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Includes ------------------------------------------------------------------*/
 325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #include "stm32f1xx_hal.h"
 326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @addtogroup STM32F1xx_HAL_Driver
 328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC ADC
 332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief ADC HAL module driver
 333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #ifdef HAL_ADC_MODULE_ENABLED
 337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private typedef -----------------------------------------------------------*/
 339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private define ------------------------------------------------------------*/
 340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Private_Constants ADC Private Constants
 341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Timeout values for ADC enable and disable settling time.                 */
 345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Values defined to be higher than worst cases: low clocks freq,           */
 346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* maximum prescaler.                                                       */
 347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Ex of profile low frequency : Clock source at 0.1 MHz, ADC clock         */
 348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* prescaler 4, sampling time 12.5 ADC clock cycles, resolution 12 bits.    */
 349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Unit: ms                                                                 */
 350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   #define ADC_ENABLE_TIMEOUT              2U
 351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   #define ADC_DISABLE_TIMEOUT             2U
 352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Delay for ADC stabilization time.                                        */
 354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Maximum delay is 1us (refer to device datasheet, parameter tSTAB).       */
 355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Unit: us                                                                 */
 356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   #define ADC_STAB_DELAY_US               1U
 357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Delay for temperature sensor stabilization time.                         */
 359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Maximum delay is 10us (refer to device datasheet, parameter tSTART).     */
 360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Unit: us                                                                 */
 361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   #define ADC_TEMPSENSOR_DELAY_US         10U
 362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
 365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private macro -------------------------------------------------------------*/
 368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private variables ---------------------------------------------------------*/
 369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private function prototypes -----------------------------------------------*/
 370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
 371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 8


 375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Exported functions --------------------------------------------------------*/
 378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions ADC Exported Functions
 380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group1 Initialization/de-initialization functions 
 384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief    Initialization and Configuration functions
 385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
 386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @verbatim    
 387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
 388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               ##### Initialization and de-initialization functions #####
 389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
 390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Initialize and configure the ADC. 
 392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) De-initialize the ADC.
 393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @endverbatim
 395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Initializes the ADC peripheral and regular group according to  
 400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         parameters specified in structure "ADC_InitTypeDef".
 401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   As prerequisite, ADC clock must be configured at RCC top level
 402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         (clock source APB2).
 403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         See commented example code below that can be copied and uncommented 
 404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         into HAL_ADC_MspInit().
 405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
 406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         This function initializes the ADC MSP (HAL_ADC_MspInit()) only when
 407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         coming from ADC state reset. Following calls to this function can
 408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         be used to reconfigure some parameters of ADC_InitTypeDef  
 409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         structure on the fly, without modifying MSP configuration. If ADC  
 410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         MSP has to be modified again, HAL_ADC_DeInit() must be called
 411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         before HAL_ADC_Init().
 412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
 413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
 414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         "ADC_InitTypeDef".
 415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   This function configures the ADC within 2 scopes: scope of entire 
 416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         ADC and scope of regular group. For parameters details, see comments 
 417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         of structure "ADC_InitTypeDef".
 418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
 420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
 422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
  27              		.loc 1 422 1
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 24
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 9


  36 0002 86B0     		sub	sp, sp, #24
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 32
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 7860     		str	r0, [r7, #4]
 423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  43              		.loc 1 423 21
  44 0008 0023     		movs	r3, #0
  45 000a FB75     		strb	r3, [r7, #23]
 424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tmp_cr1 = 0U;
  46              		.loc 1 424 12
  47 000c 0023     		movs	r3, #0
  48 000e 3B61     		str	r3, [r7, #16]
 425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tmp_cr2 = 0U;
  49              		.loc 1 425 12
  50 0010 0023     		movs	r3, #0
  51 0012 BB60     		str	r3, [r7, #8]
 426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tmp_sqr1 = 0U;
  52              		.loc 1 426 12
  53 0014 0023     		movs	r3, #0
  54 0016 FB60     		str	r3, [r7, #12]
 427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check ADC handle */
 429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(hadc == NULL)
  55              		.loc 1 429 5
  56 0018 7B68     		ldr	r3, [r7, #4]
  57 001a 002B     		cmp	r3, #0
  58 001c 01D1     		bne	.L2
 430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     return HAL_ERROR;
  59              		.loc 1 431 12
  60 001e 0123     		movs	r3, #1
  61 0020 BEE0     		b	.L3
  62              	.L2:
 432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
  63              		.loc 1 441 16
  64 0022 7B68     		ldr	r3, [r7, #4]
  65 0024 9B68     		ldr	r3, [r3, #8]
  66              		.loc 1 441 5
  67 0026 002B     		cmp	r3, #0
 442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(hadc->Init.DiscontinuousConvMode != DISABLE)
 446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 10


 448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* As prerequisite, into HAL_ADC_MspInit(), ADC clock must be configured    */
 452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* at RCC top level.                                                        */
 453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Refer to header of this file for more details on clock enabling          */
 454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* procedure.                                                               */
 455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Actions performed only if ADC is coming from state reset:                */
 457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* - Initialization of ADC MSP                                              */
 458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (hadc->State == HAL_ADC_STATE_RESET)
  68              		.loc 1 458 11
  69 0028 7B68     		ldr	r3, [r7, #4]
  70 002a 9B6A     		ldr	r3, [r3, #40]
  71              		.loc 1 458 6
  72 002c 002B     		cmp	r3, #0
  73 002e 09D1     		bne	.L5
 459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Initialize ADC error code */
 461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
  74              		.loc 1 461 5
  75 0030 7B68     		ldr	r3, [r7, #4]
  76 0032 0022     		movs	r2, #0
  77 0034 DA62     		str	r2, [r3, #44]
 462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Allocate lock resource and initialize it */
 464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->Lock = HAL_UNLOCKED;
  78              		.loc 1 464 16
  79 0036 7B68     		ldr	r3, [r7, #4]
  80 0038 0022     		movs	r2, #0
  81 003a 83F82420 		strb	r2, [r3, #36]
 465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Init the ADC Callback settings */
 468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak 
 469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak 
 470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak 
 471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak 
 472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak 
 473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (hadc->MspInitCallback == NULL)
 475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Init the low level hardware */
 480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->MspInitCallback(hadc);
 481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #else
 482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Init the low level hardware */
 483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     HAL_ADC_MspInit(hadc);
  82              		.loc 1 483 5
  83 003e 7868     		ldr	r0, [r7, #4]
  84 0040 FFF7FEFF 		bl	HAL_ADC_MspInit
  85              	.L5:
 484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 11


 487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
 489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Note: In case of ADC already enabled, precaution to not launch an        */
 490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       unwanted conversion while modifying register CR2 by writing 1 to   */
 491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       bit ADON.                                                          */
 492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
  86              		.loc 1 492 20
  87 0044 7868     		ldr	r0, [r7, #4]
  88 0046 FFF7FEFF 		bl	ADC_ConversionStop_Disable
  89 004a 0346     		mov	r3, r0
  90 004c FB75     		strb	r3, [r7, #23]
 493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* correctly completed.                                                     */
 497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
  91              		.loc 1 497 7
  92 004e 7B68     		ldr	r3, [r7, #4]
  93 0050 9B6A     		ldr	r3, [r3, #40]
  94 0052 03F01003 		and	r3, r3, #16
  95              		.loc 1 497 6
  96 0056 002B     		cmp	r3, #0
  97 0058 40F09980 		bne	.L6
  98              		.loc 1 497 65 discriminator 1
  99 005c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 100 005e 002B     		cmp	r3, #0
 101 0060 40F09580 		bne	.L6
 498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (tmp_hal_status == HAL_OK)                                  )
 499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
 501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 102              		.loc 1 501 5
 103 0064 7B68     		ldr	r3, [r7, #4]
 104 0066 9B6A     		ldr	r3, [r3, #40]
 105 0068 23F48853 		bic	r3, r3, #4352
 106 006c 23F00203 		bic	r3, r3, #2
 107 0070 43F00202 		orr	r2, r3, #2
 108 0074 7B68     		ldr	r3, [r7, #4]
 109 0076 9A62     		str	r2, [r3, #40]
 502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC parameters */
 506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Configuration of ADC:                                                  */
 508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - data alignment                                                      */
 509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - external trigger to start conversion                                */
 510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - external trigger polarity (always set to 1, because needed for all  */
 511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*    triggers: external trigger of SW start)                             */
 512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - continuous conversion mode                                          */
 513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
 514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       HAL_ADC_Start_xxx functions because if set in this function,     */
 515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       a conversion on injected group would start a conversion also on  */
 516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       regular group after ADC enabling.                                */
 517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_cr2 |= (hadc->Init.DataAlign                                          |
 110              		.loc 1 517 27
 111 0078 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 12


 112 007a 5A68     		ldr	r2, [r3, #4]
 518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 113              		.loc 1 518 17
 114 007c 7B68     		ldr	r3, [r7, #4]
 115 007e DB69     		ldr	r3, [r3, #28]
 517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 116              		.loc 1 517 79
 117 0080 1A43     		orrs	r2, r2, r3
 519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 118              		.loc 1 519 17
 119 0082 7B68     		ldr	r3, [r7, #4]
 120 0084 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 121 0086 5B00     		lsls	r3, r3, #1
 518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 122              		.loc 1 518 79
 123 0088 1343     		orrs	r3, r3, r2
 517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 124              		.loc 1 517 13
 125 008a BA68     		ldr	r2, [r7, #8]
 126 008c 1343     		orrs	r3, r3, r2
 127 008e BB60     		str	r3, [r7, #8]
 520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Configuration of ADC:                                                  */
 522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - scan mode                                                           */
 523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - discontinuous mode disable/enable                                   */
 524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - discontinuous mode number of conversions                            */
 525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 128              		.loc 1 525 17
 129 0090 7B68     		ldr	r3, [r7, #4]
 130 0092 9B68     		ldr	r3, [r3, #8]
 131 0094 B3F5807F 		cmp	r3, #256
 132 0098 03D0     		beq	.L7
 133              		.loc 1 525 17 is_stmt 0 discriminator 2
 134 009a 7B68     		ldr	r3, [r7, #4]
 135 009c 9B68     		ldr	r3, [r3, #8]
 136 009e 012B     		cmp	r3, #1
 137 00a0 02D1     		bne	.L8
 138              	.L7:
 139              		.loc 1 525 17 discriminator 3
 140 00a2 4FF48073 		mov	r3, #256
 141 00a6 00E0     		b	.L9
 142              	.L8:
 143              		.loc 1 525 17 discriminator 4
 144 00a8 0023     		movs	r3, #0
 145              	.L9:
 146              		.loc 1 525 13 is_stmt 1 discriminator 6
 147 00aa 3A69     		ldr	r2, [r7, #16]
 148 00ac 1343     		orrs	r3, r3, r2
 149 00ae 3B61     		str	r3, [r7, #16]
 526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable discontinuous mode only if continuous mode is disabled */
 528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
 529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
 530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (hadc->Init.DiscontinuousConvMode == ENABLE)
 150              		.loc 1 530 19 discriminator 6
 151 00b0 7B68     		ldr	r3, [r7, #4]
 152 00b2 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 13


 153              		.loc 1 530 8 discriminator 6
 154 00b4 012B     		cmp	r3, #1
 155 00b6 19D1     		bne	.L10
 531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (hadc->Init.ContinuousConvMode == DISABLE)
 156              		.loc 1 532 21
 157 00b8 7B68     		ldr	r3, [r7, #4]
 158 00ba 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 159              		.loc 1 532 10
 160 00bc 002B     		cmp	r3, #0
 161 00be 09D1     		bne	.L11
 533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Enable the selected ADC regular discontinuous mode */
 535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set the number of channels to be converted in discontinuous mode */
 536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 162              		.loc 1 536 9
 163 00c0 7B68     		ldr	r3, [r7, #4]
 164 00c2 9B69     		ldr	r3, [r3, #24]
 165 00c4 013B     		subs	r3, r3, #1
 166 00c6 5A03     		lsls	r2, r3, #13
 167 00c8 3B69     		ldr	r3, [r7, #16]
 168 00ca 1343     		orrs	r3, r3, r2
 169 00cc 43F40063 		orr	r3, r3, #2048
 170 00d0 3B61     		str	r3, [r7, #16]
 171 00d2 0BE0     		b	.L10
 172              	.L11:
 537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                          ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion)  );
 538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       else
 540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* ADC regular group settings continuous and sequencer discontinuous*/
 542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* cannot be enabled simultaneously.                                */
 543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Update ADC state machine to error */
 545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 173              		.loc 1 545 9
 174 00d4 7B68     		ldr	r3, [r7, #4]
 175 00d6 9B6A     		ldr	r3, [r3, #40]
 176 00d8 43F02002 		orr	r2, r3, #32
 177 00dc 7B68     		ldr	r3, [r7, #4]
 178 00de 9A62     		str	r2, [r3, #40]
 546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
 548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 179              		.loc 1 548 9
 180 00e0 7B68     		ldr	r3, [r7, #4]
 181 00e2 DB6A     		ldr	r3, [r3, #44]
 182 00e4 43F00102 		orr	r2, r3, #1
 183 00e8 7B68     		ldr	r3, [r7, #4]
 184 00ea DA62     		str	r2, [r3, #44]
 185              	.L10:
 549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC configuration register CR1 with previous settings */
 553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CR1,
 186              		.loc 1 553 7
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 14


 187 00ec 7B68     		ldr	r3, [r7, #4]
 188 00ee 1B68     		ldr	r3, [r3]
 189 00f0 5B68     		ldr	r3, [r3, #4]
 190 00f2 23F46941 		bic	r1, r3, #59648
 191 00f6 7B68     		ldr	r3, [r7, #4]
 192 00f8 1B68     		ldr	r3, [r3]
 193 00fa 3A69     		ldr	r2, [r7, #16]
 194 00fc 0A43     		orrs	r2, r2, r1
 195 00fe 5A60     		str	r2, [r3, #4]
 554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR1_SCAN    |
 555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR1_DISCEN  |
 556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR1_DISCNUM    ,
 557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  tmp_cr1             );
 558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC configuration register CR2 with previous settings */
 560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CR2,
 196              		.loc 1 560 7
 197 0100 7B68     		ldr	r3, [r7, #4]
 198 0102 1B68     		ldr	r3, [r3]
 199 0104 9A68     		ldr	r2, [r3, #8]
 200 0106 284B     		ldr	r3, .L17
 201 0108 1340     		ands	r3, r3, r2
 202 010a 7A68     		ldr	r2, [r7, #4]
 203 010c 1268     		ldr	r2, [r2]
 204 010e B968     		ldr	r1, [r7, #8]
 205 0110 0B43     		orrs	r3, r3, r1
 206 0112 9360     		str	r3, [r2, #8]
 561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR2_ALIGN   |
 562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR2_EXTSEL  |
 563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR2_EXTTRIG |
 564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR2_CONT       ,
 565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  tmp_cr2             );
 566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Configuration of regular group sequencer:                              */
 568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - if scan mode is disabled, regular channels sequence length is set to */
 569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   0x00: 1 channel converted (channel on regular rank 1)                */
 570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   Parameter "NbrOfConversion" is discarded.                            */
 571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   Note: Scan mode is present by hardware on this device and, if        */
 572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
 573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
 574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - if scan mode is enabled, regular channels sequence length is set to  */
 575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   parameter "NbrOfConversion"                                          */
 576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 207              		.loc 1 576 9
 208 0114 7B68     		ldr	r3, [r7, #4]
 209 0116 9B68     		ldr	r3, [r3, #8]
 210              		.loc 1 576 8
 211 0118 B3F5807F 		cmp	r3, #256
 212 011c 03D0     		beq	.L12
 213              		.loc 1 576 9 discriminator 1
 214 011e 7B68     		ldr	r3, [r7, #4]
 215 0120 9B68     		ldr	r3, [r3, #8]
 216              		.loc 1 576 51 discriminator 1
 217 0122 012B     		cmp	r3, #1
 218 0124 04D1     		bne	.L13
 219              	.L12:
 577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 15


 578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 220              		.loc 1 578 18
 221 0126 7B68     		ldr	r3, [r7, #4]
 222 0128 1B69     		ldr	r3, [r3, #16]
 223 012a 013B     		subs	r3, r3, #1
 224              		.loc 1 578 16
 225 012c 1B05     		lsls	r3, r3, #20
 226 012e FB60     		str	r3, [r7, #12]
 227              	.L13:
 579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR1,
 228              		.loc 1 581 5
 229 0130 7B68     		ldr	r3, [r7, #4]
 230 0132 1B68     		ldr	r3, [r3]
 231 0134 DB6A     		ldr	r3, [r3, #44]
 232 0136 23F47001 		bic	r1, r3, #15728640
 233 013a 7B68     		ldr	r3, [r7, #4]
 234 013c 1B68     		ldr	r3, [r3]
 235 013e FA68     		ldr	r2, [r7, #12]
 236 0140 0A43     		orrs	r2, r2, r1
 237 0142 DA62     		str	r2, [r3, #44]
 582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR1_L          ,
 583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                tmp_sqr1             );
 584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Check back that ADC registers have effectively been configured to      */
 586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* ensure of no potential problem of ADC core IP clocking.                */
 587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Check through register CR2 (excluding bits set in other functions:     */
 588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
 589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
 590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* measurement path bit (TSVREFE).                                        */
 591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 238              		.loc 1 591 9
 239 0144 7B68     		ldr	r3, [r7, #4]
 240 0146 1B68     		ldr	r3, [r3]
 241 0148 9A68     		ldr	r2, [r3, #8]
 242 014a 184B     		ldr	r3, .L17+4
 243 014c 1340     		ands	r3, r3, r2
 244              		.loc 1 591 8
 245 014e BA68     		ldr	r2, [r7, #8]
 246 0150 9A42     		cmp	r2, r3
 247 0152 0BD1     		bne	.L14
 592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
 593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
 594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_TSVREFE                     ))
 595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          == tmp_cr2)
 596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC error code to none */
 598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 248              		.loc 1 598 7
 249 0154 7B68     		ldr	r3, [r7, #4]
 250 0156 0022     		movs	r2, #0
 251 0158 DA62     		str	r2, [r3, #44]
 599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set the ADC state */
 601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 252              		.loc 1 601 7
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 16


 253 015a 7B68     		ldr	r3, [r7, #4]
 254 015c 9B6A     		ldr	r3, [r3, #40]
 255 015e 23F00303 		bic	r3, r3, #3
 256 0162 43F00102 		orr	r2, r3, #1
 257 0166 7B68     		ldr	r3, [r7, #4]
 258 0168 9A62     		str	r2, [r3, #40]
 591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
 259              		.loc 1 591 8
 260 016a 18E0     		b	.L16
 261              	.L14:
 602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
 604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
 606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Update ADC state machine to error */
 608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 262              		.loc 1 608 7
 263 016c 7B68     		ldr	r3, [r7, #4]
 264 016e 9B6A     		ldr	r3, [r3, #40]
 265 0170 23F01203 		bic	r3, r3, #18
 266 0174 43F01002 		orr	r2, r3, #16
 267 0178 7B68     		ldr	r3, [r7, #4]
 268 017a 9A62     		str	r2, [r3, #40]
 609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_ERROR_INTERNAL);
 611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC error code to ADC IP internal error */
 613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 269              		.loc 1 613 7
 270 017c 7B68     		ldr	r3, [r7, #4]
 271 017e DB6A     		ldr	r3, [r3, #44]
 272 0180 43F00102 		orr	r2, r3, #1
 273 0184 7B68     		ldr	r3, [r7, #4]
 274 0186 DA62     		str	r2, [r3, #44]
 614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       tmp_hal_status = HAL_ERROR;
 275              		.loc 1 615 22
 276 0188 0123     		movs	r3, #1
 277 018a FB75     		strb	r3, [r7, #23]
 591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
 278              		.loc 1 591 8
 279 018c 07E0     		b	.L16
 280              	.L6:
 616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
 620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC state machine to error */
 622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 281              		.loc 1 622 5
 282 018e 7B68     		ldr	r3, [r7, #4]
 283 0190 9B6A     		ldr	r3, [r3, #40]
 284 0192 43F01002 		orr	r2, r3, #16
 285 0196 7B68     		ldr	r3, [r7, #4]
 286 0198 9A62     		str	r2, [r3, #40]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 17


 623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 287              		.loc 1 624 20
 288 019a 0123     		movs	r3, #1
 289 019c FB75     		strb	r3, [r7, #23]
 290              	.L16:
 625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
 628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 291              		.loc 1 628 10
 292 019e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 293              	.L3:
 629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 294              		.loc 1 629 1
 295 01a0 1846     		mov	r0, r3
 296 01a2 1837     		adds	r7, r7, #24
 297              	.LCFI3:
 298              		.cfi_def_cfa_offset 8
 299 01a4 BD46     		mov	sp, r7
 300              	.LCFI4:
 301              		.cfi_def_cfa_register 13
 302              		@ sp needed
 303 01a6 80BD     		pop	{r7, pc}
 304              	.L18:
 305              		.align	2
 306              	.L17:
 307 01a8 FDF7E1FF 		.word	-1968131
 308 01ac FE0E1FFF 		.word	-14741762
 309              		.cfi_endproc
 310              	.LFE65:
 312              		.section	.text.HAL_ADC_DeInit,"ax",%progbits
 313              		.align	1
 314              		.global	HAL_ADC_DeInit
 315              		.syntax unified
 316              		.thumb
 317              		.thumb_func
 319              	HAL_ADC_DeInit:
 320              	.LFB66:
 630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Deinitialize the ADC peripheral registers to their default reset
 633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         values, with deinitialization of the ADC MSP.
 634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         If needed, the example code can be copied and uncommented into
 635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         function HAL_ADC_MspDeInit().
 636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
 638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
 640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 321              		.loc 1 640 1
 322              		.cfi_startproc
 323              		@ args = 0, pretend = 0, frame = 16
 324              		@ frame_needed = 1, uses_anonymous_args = 0
 325 0000 80B5     		push	{r7, lr}
 326              	.LCFI5:
 327              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 18


 328              		.cfi_offset 7, -8
 329              		.cfi_offset 14, -4
 330 0002 84B0     		sub	sp, sp, #16
 331              	.LCFI6:
 332              		.cfi_def_cfa_offset 24
 333 0004 00AF     		add	r7, sp, #0
 334              	.LCFI7:
 335              		.cfi_def_cfa_register 7
 336 0006 7860     		str	r0, [r7, #4]
 641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 337              		.loc 1 641 21
 338 0008 0023     		movs	r3, #0
 339 000a FB73     		strb	r3, [r7, #15]
 642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check ADC handle */
 644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(hadc == NULL)
 340              		.loc 1 644 5
 341 000c 7B68     		ldr	r3, [r7, #4]
 342 000e 002B     		cmp	r3, #0
 343 0010 01D1     		bne	.L20
 645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      return HAL_ERROR;
 344              		.loc 1 646 13
 345 0012 0123     		movs	r3, #1
 346 0014 ADE0     		b	.L21
 347              	.L20:
 647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set ADC state */
 653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 348              		.loc 1 653 3
 349 0016 7B68     		ldr	r3, [r7, #4]
 350 0018 9B6A     		ldr	r3, [r3, #40]
 351 001a 43F00202 		orr	r2, r3, #2
 352 001e 7B68     		ldr	r3, [r7, #4]
 353 0020 9A62     		str	r2, [r3, #40]
 654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
 657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 354              		.loc 1 657 20
 355 0022 7868     		ldr	r0, [r7, #4]
 356 0024 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 357 0028 0346     		mov	r3, r0
 358 002a FB73     		strb	r3, [r7, #15]
 658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* correctly completed.                                                     */
 662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 359              		.loc 1 662 6
 360 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 361 002e 002B     		cmp	r3, #0
 362 0030 40F09A80 		bne	.L22
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 19


 663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* ========== Reset ADC registers ========== */
 665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SR */
 670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 363              		.loc 1 670 5
 364 0034 7B68     		ldr	r3, [r7, #4]
 365 0036 1B68     		ldr	r3, [r3]
 366 0038 6FF01F02 		mvn	r2, #31
 367 003c 1A60     		str	r2, [r3]
 671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                 ADC_FLAG_JSTRT | ADC_FLAG_STRT));
 672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                          
 673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register CR1 */
 674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_AWDEN   | ADC_CR1_JAWDEN | ADC_CR1_DISCNUM | 
 368              		.loc 1 674 5
 369 003e 7B68     		ldr	r3, [r7, #4]
 370 0040 1B68     		ldr	r3, [r3]
 371 0042 5968     		ldr	r1, [r3, #4]
 372 0044 7B68     		ldr	r3, [r7, #4]
 373 0046 1A68     		ldr	r2, [r3]
 374 0048 4C4B     		ldr	r3, .L23
 375 004a 0B40     		ands	r3, r3, r1
 376 004c 5360     		str	r3, [r2, #4]
 675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR1_JDISCEN | ADC_CR1_DISCEN | ADC_CR1_JAUTO   | 
 676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR1_AWDSGL  | ADC_CR1_SCAN   | ADC_CR1_JEOCIE  |   
 677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR1_AWDIE   | ADC_CR1_EOCIE  | ADC_CR1_AWDCH    ));
 678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register CR2 */
 680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CR2, (ADC_CR2_TSVREFE | ADC_CR2_SWSTART | ADC_CR2_JSWSTART | 
 377              		.loc 1 680 5
 378 004e 7B68     		ldr	r3, [r7, #4]
 379 0050 1B68     		ldr	r3, [r3]
 380 0052 9968     		ldr	r1, [r3, #8]
 381 0054 7B68     		ldr	r3, [r7, #4]
 382 0056 1A68     		ldr	r2, [r3]
 383 0058 494B     		ldr	r3, .L23+4
 384 005a 0B40     		ands	r3, r3, r1
 385 005c 9360     		str	r3, [r2, #8]
 681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_EXTTRIG | ADC_CR2_EXTSEL  | ADC_CR2_JEXTTRIG |  
 682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_JEXTSEL | ADC_CR2_ALIGN   | ADC_CR2_DMA      |        
 683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_RSTCAL  | ADC_CR2_CAL     | ADC_CR2_CONT     |         
 684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_ADON                                          ));
 685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SMPR1 */
 687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SMPR1, (ADC_SMPR1_SMP17 | ADC_SMPR1_SMP16 | ADC_SMPR1_SMP15 | 
 386              		.loc 1 687 5
 387 005e 7B68     		ldr	r3, [r7, #4]
 388 0060 1B68     		ldr	r3, [r3]
 389 0062 DA68     		ldr	r2, [r3, #12]
 390 0064 7B68     		ldr	r3, [r7, #4]
 391 0066 1B68     		ldr	r3, [r3]
 392 0068 02F07F42 		and	r2, r2, #-16777216
 393 006c DA60     		str	r2, [r3, #12]
 688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR1_SMP14 | ADC_SMPR1_SMP13 | ADC_SMPR1_SMP12 | 
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 20


 689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR1_SMP11 | ADC_SMPR1_SMP10                    ));
 690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SMPR2 */
 692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP9 | ADC_SMPR2_SMP8 | ADC_SMPR2_SMP7 | 
 394              		.loc 1 692 5
 395 006e 7B68     		ldr	r3, [r7, #4]
 396 0070 1B68     		ldr	r3, [r3]
 397 0072 1A69     		ldr	r2, [r3, #16]
 398 0074 7B68     		ldr	r3, [r7, #4]
 399 0076 1B68     		ldr	r3, [r3]
 400 0078 02F04042 		and	r2, r2, #-1073741824
 401 007c 1A61     		str	r2, [r3, #16]
 693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR2_SMP6 | ADC_SMPR2_SMP5 | ADC_SMPR2_SMP4 | 
 694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR2_SMP3 | ADC_SMPR2_SMP2 | ADC_SMPR2_SMP1 | 
 695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR2_SMP0                                    ));
 696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR1 */
 698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 402              		.loc 1 698 5
 403 007e 7B68     		ldr	r3, [r7, #4]
 404 0080 1B68     		ldr	r3, [r3]
 405 0082 5B69     		ldr	r3, [r3, #20]
 406 0084 7A68     		ldr	r2, [r7, #4]
 407 0086 1268     		ldr	r2, [r2]
 408 0088 23F47F63 		bic	r3, r3, #4080
 409 008c 23F00F03 		bic	r3, r3, #15
 410 0090 5361     		str	r3, [r2, #20]
 699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR2 */
 700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 411              		.loc 1 700 5
 412 0092 7B68     		ldr	r3, [r7, #4]
 413 0094 1B68     		ldr	r3, [r3]
 414 0096 9B69     		ldr	r3, [r3, #24]
 415 0098 7A68     		ldr	r2, [r7, #4]
 416 009a 1268     		ldr	r2, [r2]
 417 009c 23F47F63 		bic	r3, r3, #4080
 418 00a0 23F00F03 		bic	r3, r3, #15
 419 00a4 9361     		str	r3, [r2, #24]
 701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR3 */
 702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 420              		.loc 1 702 5
 421 00a6 7B68     		ldr	r3, [r7, #4]
 422 00a8 1B68     		ldr	r3, [r3]
 423 00aa DB69     		ldr	r3, [r3, #28]
 424 00ac 7A68     		ldr	r2, [r7, #4]
 425 00ae 1268     		ldr	r2, [r2]
 426 00b0 23F47F63 		bic	r3, r3, #4080
 427 00b4 23F00F03 		bic	r3, r3, #15
 428 00b8 D361     		str	r3, [r2, #28]
 703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR4 */
 704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 429              		.loc 1 704 5
 430 00ba 7B68     		ldr	r3, [r7, #4]
 431 00bc 1B68     		ldr	r3, [r3]
 432 00be 1B6A     		ldr	r3, [r3, #32]
 433 00c0 7A68     		ldr	r2, [r7, #4]
 434 00c2 1268     		ldr	r2, [r2]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 21


 435 00c4 23F47F63 		bic	r3, r3, #4080
 436 00c8 23F00F03 		bic	r3, r3, #15
 437 00cc 1362     		str	r3, [r2, #32]
 705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register HTR */
 707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 438              		.loc 1 707 5
 439 00ce 7B68     		ldr	r3, [r7, #4]
 440 00d0 1B68     		ldr	r3, [r3]
 441 00d2 5B6A     		ldr	r3, [r3, #36]
 442 00d4 7A68     		ldr	r2, [r7, #4]
 443 00d6 1268     		ldr	r2, [r2]
 444 00d8 23F47F63 		bic	r3, r3, #4080
 445 00dc 23F00F03 		bic	r3, r3, #15
 446 00e0 5362     		str	r3, [r2, #36]
 708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register LTR */
 709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 447              		.loc 1 709 5
 448 00e2 7B68     		ldr	r3, [r7, #4]
 449 00e4 1B68     		ldr	r3, [r3]
 450 00e6 9B6A     		ldr	r3, [r3, #40]
 451 00e8 7A68     		ldr	r2, [r7, #4]
 452 00ea 1268     		ldr	r2, [r2]
 453 00ec 23F47F63 		bic	r3, r3, #4080
 454 00f0 23F00F03 		bic	r3, r3, #15
 455 00f4 9362     		str	r3, [r2, #40]
 710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SQR1 */
 712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 456              		.loc 1 712 5
 457 00f6 7B68     		ldr	r3, [r7, #4]
 458 00f8 1B68     		ldr	r3, [r3]
 459 00fa DA6A     		ldr	r2, [r3, #44]
 460 00fc 7B68     		ldr	r3, [r7, #4]
 461 00fe 1B68     		ldr	r3, [r3]
 462 0100 02F07F42 		and	r2, r2, #-16777216
 463 0104 DA62     		str	r2, [r3, #44]
 713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
 714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
 715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SQR1 */
 717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 464              		.loc 1 717 5
 465 0106 7B68     		ldr	r3, [r7, #4]
 466 0108 1B68     		ldr	r3, [r3]
 467 010a DA6A     		ldr	r2, [r3, #44]
 468 010c 7B68     		ldr	r3, [r7, #4]
 469 010e 1B68     		ldr	r3, [r3]
 470 0110 02F07F42 		and	r2, r2, #-16777216
 471 0114 DA62     		str	r2, [r3, #44]
 718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
 719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
 720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SQR2 */
 722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ12 | ADC_SQR2_SQ11 | ADC_SQR2_SQ10 | 
 472              		.loc 1 722 5
 473 0116 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 22


 474 0118 1B68     		ldr	r3, [r3]
 475 011a 1A6B     		ldr	r2, [r3, #48]
 476 011c 7B68     		ldr	r3, [r7, #4]
 477 011e 1B68     		ldr	r3, [r3]
 478 0120 02F04042 		and	r2, r2, #-1073741824
 479 0124 1A63     		str	r2, [r3, #48]
 723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR2_SQ9  | ADC_SQR2_SQ8  | ADC_SQR2_SQ7   );
 724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SQR3 */
 726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ6 | ADC_SQR3_SQ5 | ADC_SQR3_SQ4 | 
 480              		.loc 1 726 5
 481 0126 7B68     		ldr	r3, [r7, #4]
 482 0128 1B68     		ldr	r3, [r3]
 483 012a 5A6B     		ldr	r2, [r3, #52]
 484 012c 7B68     		ldr	r3, [r7, #4]
 485 012e 1B68     		ldr	r3, [r3]
 486 0130 02F04042 		and	r2, r2, #-1073741824
 487 0134 5A63     		str	r2, [r3, #52]
 727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR3_SQ3 | ADC_SQR3_SQ2 | ADC_SQR3_SQ1  );
 728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JSQR */
 730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 488              		.loc 1 730 5
 489 0136 7B68     		ldr	r3, [r7, #4]
 490 0138 1B68     		ldr	r3, [r3]
 491 013a 9B6B     		ldr	r3, [r3, #56]
 492 013c 7A68     		ldr	r2, [r7, #4]
 493 013e 1268     		ldr	r2, [r2]
 494 0140 9B0D     		lsrs	r3, r3, #22
 495 0142 9B05     		lsls	r3, r3, #22
 496 0144 9363     		str	r3, [r2, #56]
 731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
 732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ2 | ADC_JSQR_JSQ1  );
 733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JSQR */
 735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 497              		.loc 1 735 5
 498 0146 7B68     		ldr	r3, [r7, #4]
 499 0148 1B68     		ldr	r3, [r3]
 500 014a 9B6B     		ldr	r3, [r3, #56]
 501 014c 7A68     		ldr	r2, [r7, #4]
 502 014e 1268     		ldr	r2, [r2]
 503 0150 9B0D     		lsrs	r3, r3, #22
 504 0152 9B05     		lsls	r3, r3, #22
 505 0154 9363     		str	r3, [r2, #56]
 736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
 737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ2 | ADC_JSQR_JSQ1  );
 738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register DR */
 740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* bits in access mode read only, no direct reset applicable*/
 741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset registers JDR1, JDR2, JDR3, JDR4 */
 743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* bits in access mode read only, no direct reset applicable*/
 744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* ========== Hard reset ADC peripheral ========== */
 746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Performs a global reset of the entire ADC peripheral: ADC state is     */
 747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* forced to a similar state after device power-on.                       */
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 23


 748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If needed, copy-paste and uncomment the following reset code into      */
 749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* function "void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)":              */
 750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*                                                                        */
 751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_FORCE_RESET()                                          */
 752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_RELEASE_RESET()                                        */
 753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (hadc->MspDeInitCallback == NULL)
 756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit  */
 758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* DeInit the low level hardware */
 761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->MspDeInitCallback(hadc);
 762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #else
 763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* DeInit the low level hardware */
 764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     HAL_ADC_MspDeInit(hadc);
 506              		.loc 1 764 5
 507 0156 7868     		ldr	r0, [r7, #4]
 508 0158 FFF7FEFF 		bl	HAL_ADC_MspDeInit
 765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC error code to none */
 768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 509              		.loc 1 768 5
 510 015c 7B68     		ldr	r3, [r7, #4]
 511 015e 0022     		movs	r2, #0
 512 0160 DA62     		str	r2, [r3, #44]
 769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
 771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->State = HAL_ADC_STATE_RESET; 
 513              		.loc 1 771 17
 514 0162 7B68     		ldr	r3, [r7, #4]
 515 0164 0022     		movs	r2, #0
 516 0166 9A62     		str	r2, [r3, #40]
 517              	.L22:
 772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
 776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 518              		.loc 1 776 3
 519 0168 7B68     		ldr	r3, [r7, #4]
 520 016a 0022     		movs	r2, #0
 521 016c 83F82420 		strb	r2, [r3, #36]
 777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
 779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 522              		.loc 1 779 10
 523 0170 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 524              	.L21:
 780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 525              		.loc 1 780 1
 526 0172 1846     		mov	r0, r3
 527 0174 1037     		adds	r7, r7, #16
 528              	.LCFI8:
 529              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 24


 530 0176 BD46     		mov	sp, r7
 531              	.LCFI9:
 532              		.cfi_def_cfa_register 13
 533              		@ sp needed
 534 0178 80BD     		pop	{r7, pc}
 535              	.L24:
 536 017a 00BF     		.align	2
 537              	.L23:
 538 017c 00003FFF 		.word	-12648448
 539 0180 F00601FF 		.word	-16709904
 540              		.cfi_endproc
 541              	.LFE66:
 543              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
 544              		.align	1
 545              		.weak	HAL_ADC_MspInit
 546              		.syntax unified
 547              		.thumb
 548              		.thumb_func
 550              	HAL_ADC_MspInit:
 551              	.LFB67:
 781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Initializes the ADC MSP.
 784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
 786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
 788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 552              		.loc 1 788 1
 553              		.cfi_startproc
 554              		@ args = 0, pretend = 0, frame = 8
 555              		@ frame_needed = 1, uses_anonymous_args = 0
 556              		@ link register save eliminated.
 557 0000 80B4     		push	{r7}
 558              	.LCFI10:
 559              		.cfi_def_cfa_offset 4
 560              		.cfi_offset 7, -4
 561 0002 83B0     		sub	sp, sp, #12
 562              	.LCFI11:
 563              		.cfi_def_cfa_offset 16
 564 0004 00AF     		add	r7, sp, #0
 565              	.LCFI12:
 566              		.cfi_def_cfa_register 7
 567 0006 7860     		str	r0, [r7, #4]
 789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
 791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_MspInit must be implemented in the user file.
 793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    */ 
 794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 568              		.loc 1 794 1
 569 0008 00BF     		nop
 570 000a 0C37     		adds	r7, r7, #12
 571              	.LCFI13:
 572              		.cfi_def_cfa_offset 4
 573 000c BD46     		mov	sp, r7
 574              	.LCFI14:
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 25


 575              		.cfi_def_cfa_register 13
 576              		@ sp needed
 577 000e 80BC     		pop	{r7}
 578              	.LCFI15:
 579              		.cfi_restore 7
 580              		.cfi_def_cfa_offset 0
 581 0010 7047     		bx	lr
 582              		.cfi_endproc
 583              	.LFE67:
 585              		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
 586              		.align	1
 587              		.weak	HAL_ADC_MspDeInit
 588              		.syntax unified
 589              		.thumb
 590              		.thumb_func
 592              	HAL_ADC_MspDeInit:
 593              	.LFB68:
 795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  DeInitializes the ADC MSP.
 798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
 800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
 802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 594              		.loc 1 802 1
 595              		.cfi_startproc
 596              		@ args = 0, pretend = 0, frame = 8
 597              		@ frame_needed = 1, uses_anonymous_args = 0
 598              		@ link register save eliminated.
 599 0000 80B4     		push	{r7}
 600              	.LCFI16:
 601              		.cfi_def_cfa_offset 4
 602              		.cfi_offset 7, -4
 603 0002 83B0     		sub	sp, sp, #12
 604              	.LCFI17:
 605              		.cfi_def_cfa_offset 16
 606 0004 00AF     		add	r7, sp, #0
 607              	.LCFI18:
 608              		.cfi_def_cfa_register 7
 609 0006 7860     		str	r0, [r7, #4]
 803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
 805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_MspDeInit must be implemented in the user file.
 807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    */ 
 808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 610              		.loc 1 808 1
 611 0008 00BF     		nop
 612 000a 0C37     		adds	r7, r7, #12
 613              	.LCFI19:
 614              		.cfi_def_cfa_offset 4
 615 000c BD46     		mov	sp, r7
 616              	.LCFI20:
 617              		.cfi_def_cfa_register 13
 618              		@ sp needed
 619 000e 80BC     		pop	{r7}
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 26


 620              	.LCFI21:
 621              		.cfi_restore 7
 622              		.cfi_def_cfa_offset 0
 623 0010 7047     		bx	lr
 624              		.cfi_endproc
 625              	.LFE68:
 627              		.section	.text.HAL_ADC_Start,"ax",%progbits
 628              		.align	1
 629              		.global	HAL_ADC_Start
 630              		.syntax unified
 631              		.thumb
 632              		.thumb_func
 634              	HAL_ADC_Start:
 635              	.LFB69:
 809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Register a User ADC Callback
 813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         To be used instead of the weak predefined callback
 814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc Pointer to a ADC_HandleTypeDef structure that contains
 815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *                the configuration information for the specified ADC.
 816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  CallbackID ID of the callback to be registered
 817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         This parameter can be one of the following values:
 818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_COMPLETE_CB_ID      ADC conversion complete callback ID
 819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_HALF_CB_ID          ADC conversion complete callback ID
 820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID    ADC analog watchdog 1 callback ID
 821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_ERROR_CB_ID                    ADC error callback ID
 822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID  ADC group injected conversion complet
 823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID                  ADC Msp Init callback ID
 824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID                ADC Msp DeInit callback ID
 825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID MspInit callback ID
 826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID MspDeInit callback ID
 827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  pCallback pointer to the Callback function
 828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
 829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef Callb
 831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef status = HAL_OK;
 833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (pCallback == NULL)
 835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update the error code */
 837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     return HAL_ERROR;
 840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if ((hadc->State & HAL_ADC_STATE_READY) != 0)
 843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     switch (CallbackID)
 845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
 847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->ConvCpltCallback = pCallback;
 848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_CONVERSION_HALF_CB_ID :
 851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->ConvHalfCpltCallback = pCallback;
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 27


 852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
 855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->LevelOutOfWindowCallback = pCallback;
 856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_ERROR_CB_ID :
 859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->ErrorCallback = pCallback;
 860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID :
 863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->InjectedConvCpltCallback = pCallback;
 864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
 867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->MspInitCallback = pCallback;
 868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
 871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->MspDeInitCallback = pCallback;
 872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       default :
 875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Update the error code */
 876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Return error status */
 879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         status = HAL_ERROR;
 880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else if (HAL_ADC_STATE_RESET == hadc->State)
 884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     switch (CallbackID)
 886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
 888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->MspInitCallback = pCallback;
 889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
 892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->MspDeInitCallback = pCallback;
 893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       default :
 896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Update the error code */
 897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Return error status */
 900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         status = HAL_ERROR;
 901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
 905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update the error code */
 907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 28


 909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Return error status */
 910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     status =  HAL_ERROR;
 911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return status;
 914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Unregister a ADC Callback
 918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         ADC callback is redirected to the weak predefined callback
 919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc Pointer to a ADC_HandleTypeDef structure that contains
 920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *                the configuration information for the specified ADC.
 921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  CallbackID ID of the callback to be unregistered
 922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         This parameter can be one of the following values:
 923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_COMPLETE_CB_ID      ADC conversion complete callback ID
 924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_HALF_CB_ID          ADC conversion complete callback ID
 925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID    ADC analog watchdog 1 callback ID
 926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_ERROR_CB_ID                    ADC error callback ID
 927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID  ADC group injected conversion complet
 928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID                  ADC Msp Init callback ID
 929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID                ADC Msp DeInit callback ID
 930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID MspInit callback ID
 931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID MspDeInit callback ID
 932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
 933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_UnRegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef Cal
 935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef status = HAL_OK;
 937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if ((hadc->State & HAL_ADC_STATE_READY) != 0)
 939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     switch (CallbackID)
 941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
 943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->ConvCpltCallback = HAL_ADC_ConvCpltCallback;
 944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_CONVERSION_HALF_CB_ID :
 947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->ConvHalfCpltCallback = HAL_ADC_ConvHalfCpltCallback;
 948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
 951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->LevelOutOfWindowCallback = HAL_ADC_LevelOutOfWindowCallback;
 952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_ERROR_CB_ID :
 955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->ErrorCallback = HAL_ADC_ErrorCallback;
 956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID :
 959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->InjectedConvCpltCallback = HAL_ADCEx_InjectedConvCpltCallback;
 960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
 963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit              */
 964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 29


 966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
 967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit            */
 968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       default :
 971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Update the error code */
 972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Return error status */
 975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         status =  HAL_ERROR;
 976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else if (HAL_ADC_STATE_RESET == hadc->State)
 980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     switch (CallbackID)
 982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
 984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->MspInitCallback = HAL_ADC_MspInit;                   /* Legacy weak MspInit          
 985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
 988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->MspDeInitCallback = HAL_ADC_MspDeInit;               /* Legacy weak MspDeInit        
 989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       default :
 992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Update the error code */
 993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Return error status */
 996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         status =  HAL_ERROR;
 997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
1001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update the error code */
1003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Return error status */
1006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     status =  HAL_ERROR;
1007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return status;
1010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
1011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
1016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group2 IO operation functions
1019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *  @brief    Input and Output operation functions
1020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *
1021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @verbatim   
1022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 30


1023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       ##### IO operation functions #####
1024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
1025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]  This section provides functions allowing to:
1026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Start conversion of regular group.
1027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Stop conversion of regular group.
1028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Poll for conversion complete on regular group.
1029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Poll for conversion event.
1030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Get result of regular channel conversion.
1031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Start conversion of regular group and enable interruptions.
1032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Stop conversion of regular group and disable interruptions.
1033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Handle ADC interrupt request
1034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Start conversion of regular group and enable DMA transfer.
1035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Stop conversion of regular group and disable ADC DMA transfer.
1036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @endverbatim
1037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
1038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group.
1042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Interruptions enabled in this function: None.
1043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
1045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
1047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 636              		.loc 1 1047 1
 637              		.cfi_startproc
 638              		@ args = 0, pretend = 0, frame = 16
 639              		@ frame_needed = 1, uses_anonymous_args = 0
 640 0000 80B5     		push	{r7, lr}
 641              	.LCFI22:
 642              		.cfi_def_cfa_offset 8
 643              		.cfi_offset 7, -8
 644              		.cfi_offset 14, -4
 645 0002 84B0     		sub	sp, sp, #16
 646              	.LCFI23:
 647              		.cfi_def_cfa_offset 24
 648 0004 00AF     		add	r7, sp, #0
 649              	.LCFI24:
 650              		.cfi_def_cfa_register 7
 651 0006 7860     		str	r0, [r7, #4]
1048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 652              		.loc 1 1048 21
 653 0008 0023     		movs	r3, #0
 654 000a FB73     		strb	r3, [r7, #15]
1049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 655              		.loc 1 1054 3
 656 000c 7B68     		ldr	r3, [r7, #4]
 657 000e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 658 0012 012B     		cmp	r3, #1
 659 0014 01D1     		bne	.L28
 660              		.loc 1 1054 3 is_stmt 0 discriminator 1
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 31


 661 0016 0223     		movs	r3, #2
 662 0018 98E0     		b	.L29
 663              	.L28:
 664              		.loc 1 1054 3 discriminator 2
 665 001a 7B68     		ldr	r3, [r7, #4]
 666 001c 0122     		movs	r2, #1
 667 001e 83F82420 		strb	r2, [r3, #36]
1055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    
1056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Enable the ADC peripheral */
1057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_Enable(hadc);
 668              		.loc 1 1057 20 is_stmt 1 discriminator 2
 669 0022 7868     		ldr	r0, [r7, #4]
 670 0024 FFF7FEFF 		bl	ADC_Enable
 671 0028 0346     		mov	r3, r0
 672 002a FB73     		strb	r3, [r7, #15]
1058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
1060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 673              		.loc 1 1060 6 discriminator 2
 674 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 675 002e 002B     		cmp	r3, #0
 676 0030 40F08780 		bne	.L30
1061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state                                                          */
1063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
1064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - Set state bitfield related to regular operation                      */
1065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 677              		.loc 1 1065 5
 678 0034 7B68     		ldr	r3, [r7, #4]
 679 0036 9B6A     		ldr	r3, [r3, #40]
 680 0038 23F44073 		bic	r3, r3, #768
 681 003c 23F00103 		bic	r3, r3, #1
 682 0040 43F48072 		orr	r2, r3, #256
 683 0044 7B68     		ldr	r3, [r7, #4]
 684 0046 9A62     		str	r2, [r3, #40]
1066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC,
1067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
1068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set group injected state (from auto-injection) and multimode state     */
1070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* for all cases of multimode: independent mode, multimode ADC master     */
1071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* or multimode ADC slave (for devices with several ADCs):                */
1072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 685              		.loc 1 1072 9
 686 0048 7B68     		ldr	r3, [r7, #4]
 687 004a 1B68     		ldr	r3, [r3]
 688              		.loc 1 1072 8
 689 004c 414A     		ldr	r2, .L42
 690 004e 9342     		cmp	r3, r2
 691 0050 05D1     		bne	.L31
 692              		.loc 1 1072 9 discriminator 1
 693 0052 414B     		ldr	r3, .L42+4
 694 0054 5B68     		ldr	r3, [r3, #4]
 695 0056 03F47023 		and	r3, r3, #983040
 696 005a 002B     		cmp	r3, #0
 697 005c 15D1     		bne	.L32
 698              	.L31:
1073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 32


1074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC independent or master) */
1075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 699              		.loc 1 1075 7
 700 005e 7B68     		ldr	r3, [r7, #4]
 701 0060 9B6A     		ldr	r3, [r3, #40]
 702 0062 23F48012 		bic	r2, r3, #1048576
 703 0066 7B68     		ldr	r3, [r7, #4]
 704 0068 9A62     		str	r2, [r3, #40]
1076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 705              		.loc 1 1079 11
 706 006a 7B68     		ldr	r3, [r7, #4]
 707 006c 1B68     		ldr	r3, [r3]
 708 006e 5B68     		ldr	r3, [r3, #4]
 709 0070 03F48063 		and	r3, r3, #1024
 710              		.loc 1 1079 10
 711 0074 002B     		cmp	r3, #0
 712 0076 26D0     		beq	.L34
1080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 713              		.loc 1 1081 9
 714 0078 7B68     		ldr	r3, [r7, #4]
 715 007a 9B6A     		ldr	r3, [r3, #40]
 716 007c 23F44053 		bic	r3, r3, #12288
 717 0080 43F48052 		orr	r2, r3, #4096
 718 0084 7B68     		ldr	r3, [r7, #4]
 719 0086 9A62     		str	r2, [r3, #40]
1079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 720              		.loc 1 1079 10
 721 0088 1DE0     		b	.L34
 722              	.L32:
1082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC slave) */
1087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 723              		.loc 1 1087 7
 724 008a 7B68     		ldr	r3, [r7, #4]
 725 008c 9B6A     		ldr	r3, [r3, #40]
 726 008e 43F48012 		orr	r2, r3, #1048576
 727 0092 7B68     		ldr	r3, [r7, #4]
 728 0094 9A62     		str	r2, [r3, #40]
1088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 729              		.loc 1 1091 11
 730 0096 7B68     		ldr	r3, [r7, #4]
 731 0098 1B68     		ldr	r3, [r3]
 732              		.loc 1 1091 10
 733 009a 2F4A     		ldr	r2, .L42+4
 734 009c 9342     		cmp	r3, r2
 735 009e 04D0     		beq	.L35
 736              		.loc 1 1091 11 discriminator 2
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 33


 737 00a0 7B68     		ldr	r3, [r7, #4]
 738 00a2 1B68     		ldr	r3, [r3]
 739 00a4 2B4A     		ldr	r2, .L42
 740 00a6 9342     		cmp	r3, r2
 741 00a8 0DD1     		bne	.L34
 742              	.L35:
 743              		.loc 1 1091 11 is_stmt 0 discriminator 3
 744 00aa 2B4B     		ldr	r3, .L42+4
 745 00ac 5B68     		ldr	r3, [r3, #4]
 746 00ae 03F48063 		and	r3, r3, #1024
 747 00b2 002B     		cmp	r3, #0
 748 00b4 07D0     		beq	.L34
1092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 749              		.loc 1 1093 9 is_stmt 1
 750 00b6 7B68     		ldr	r3, [r7, #4]
 751 00b8 9B6A     		ldr	r3, [r3, #40]
 752 00ba 23F44053 		bic	r3, r3, #12288
 753 00be 43F48052 		orr	r2, r3, #4096
 754 00c2 7B68     		ldr	r3, [r7, #4]
 755 00c4 9A62     		str	r2, [r3, #40]
 756              	.L34:
1094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
1098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 757              		.loc 1 1098 9
 758 00c6 7B68     		ldr	r3, [r7, #4]
 759 00c8 9B6A     		ldr	r3, [r3, #40]
 760 00ca 03F48053 		and	r3, r3, #4096
 761              		.loc 1 1098 8
 762 00ce 002B     		cmp	r3, #0
 763 00d0 06D0     		beq	.L36
1099:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
1101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 764              		.loc 1 1101 7
 765 00d2 7B68     		ldr	r3, [r7, #4]
 766 00d4 DB6A     		ldr	r3, [r3, #44]
 767 00d6 23F00602 		bic	r2, r3, #6
 768 00da 7B68     		ldr	r3, [r7, #4]
 769 00dc DA62     		str	r2, [r3, #44]
 770 00de 02E0     		b	.L37
 771              	.L36:
1102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Reset ADC all error code fields */
1106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 772              		.loc 1 1106 7
 773 00e0 7B68     		ldr	r3, [r7, #4]
 774 00e2 0022     		movs	r2, #0
 775 00e4 DA62     		str	r2, [r3, #44]
 776              	.L37:
1107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 34


1109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
1110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
1111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
1112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 777              		.loc 1 1112 5
 778 00e6 7B68     		ldr	r3, [r7, #4]
 779 00e8 0022     		movs	r2, #0
 780 00ea 83F82420 		strb	r2, [r3, #36]
1113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Clear regular group conversion flag */
1115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
1116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 781              		.loc 1 1116 5
 782 00ee 7B68     		ldr	r3, [r7, #4]
 783 00f0 1B68     		ldr	r3, [r3]
 784 00f2 6FF00202 		mvn	r2, #2
 785 00f6 1A60     		str	r2, [r3]
1117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable conversion of regular group.                                    */
1119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If software start has been selected, conversion starts immediately.    */
1120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If external trigger has been selected, conversion will start at next   */
1121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* trigger event.                                                         */
1122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Case of multimode enabled:                                             */ 
1123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
1124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - if ADC is master, ADC is enabled and conversion is started.         */
1125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If ADC is master, ADC is enabled and conversion is started.            */
1126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Note: Alternate trigger for single conversion could be to force an     */
1127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
1128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 786              		.loc 1 1128 9
 787 00f8 7B68     		ldr	r3, [r7, #4]
 788 00fa 1B68     		ldr	r3, [r3]
 789 00fc 9B68     		ldr	r3, [r3, #8]
 790 00fe 03F46023 		and	r3, r3, #917504
 791              		.loc 1 1128 8
 792 0102 B3F5602F 		cmp	r3, #917504
 793 0106 13D1     		bne	.L38
1129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 794              		.loc 1 1129 9 discriminator 1
 795 0108 7B68     		ldr	r3, [r7, #4]
 796 010a 1B68     		ldr	r3, [r3]
1128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 797              		.loc 1 1128 50 discriminator 1
 798 010c 114A     		ldr	r2, .L42
 799 010e 9342     		cmp	r3, r2
 800 0110 05D1     		bne	.L39
 801              		.loc 1 1129 9 discriminator 2
 802 0112 114B     		ldr	r3, .L42+4
 803 0114 5B68     		ldr	r3, [r3, #4]
 804 0116 03F47023 		and	r3, r3, #983040
1128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 805              		.loc 1 1128 50 discriminator 2
 806 011a 002B     		cmp	r3, #0
 807 011c 08D1     		bne	.L38
 808              	.L39:
1130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start ADC conversion on regular group with SW start */
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 35


1132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 809              		.loc 1 1132 7
 810 011e 7B68     		ldr	r3, [r7, #4]
 811 0120 1B68     		ldr	r3, [r3]
 812 0122 9A68     		ldr	r2, [r3, #8]
 813 0124 7B68     		ldr	r3, [r7, #4]
 814 0126 1B68     		ldr	r3, [r3]
 815 0128 42F4A002 		orr	r2, r2, #5242880
 816 012c 9A60     		str	r2, [r3, #8]
 817 012e 0CE0     		b	.L41
 818              	.L38:
1133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start ADC conversion on regular group with external trigger */
1137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 819              		.loc 1 1137 7
 820 0130 7B68     		ldr	r3, [r7, #4]
 821 0132 1B68     		ldr	r3, [r3]
 822 0134 9A68     		ldr	r2, [r3, #8]
 823 0136 7B68     		ldr	r3, [r7, #4]
 824 0138 1B68     		ldr	r3, [r3]
 825 013a 42F48012 		orr	r2, r2, #1048576
 826 013e 9A60     		str	r2, [r3, #8]
 827 0140 03E0     		b	.L41
 828              	.L30:
1138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
1141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
1143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 829              		.loc 1 1143 5
 830 0142 7B68     		ldr	r3, [r7, #4]
 831 0144 0022     		movs	r2, #0
 832 0146 83F82420 		strb	r2, [r3, #36]
 833              	.L41:
1144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 834              		.loc 1 1147 10
 835 014a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 836              	.L29:
1148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 837              		.loc 1 1148 1
 838 014c 1846     		mov	r0, r3
 839 014e 1037     		adds	r7, r7, #16
 840              	.LCFI25:
 841              		.cfi_def_cfa_offset 8
 842 0150 BD46     		mov	sp, r7
 843              	.LCFI26:
 844              		.cfi_def_cfa_register 13
 845              		@ sp needed
 846 0152 80BD     		pop	{r7, pc}
 847              	.L43:
 848              		.align	2
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 36


 849              	.L42:
 850 0154 00280140 		.word	1073817600
 851 0158 00240140 		.word	1073816576
 852              		.cfi_endproc
 853              	.LFE69:
 855              		.section	.text.HAL_ADC_Stop,"ax",%progbits
 856              		.align	1
 857              		.global	HAL_ADC_Stop
 858              		.syntax unified
 859              		.thumb
 860              		.thumb_func
 862              	HAL_ADC_Stop:
 863              	.LFB70:
1149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected channels in 
1152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC peripheral.
1153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note:  ADC peripheral disable is forcing stop of potential 
1154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         conversion on injected group. If injected group is under use, it
1155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
1156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status.
1158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
1160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 864              		.loc 1 1160 1
 865              		.cfi_startproc
 866              		@ args = 0, pretend = 0, frame = 16
 867              		@ frame_needed = 1, uses_anonymous_args = 0
 868 0000 80B5     		push	{r7, lr}
 869              	.LCFI27:
 870              		.cfi_def_cfa_offset 8
 871              		.cfi_offset 7, -8
 872              		.cfi_offset 14, -4
 873 0002 84B0     		sub	sp, sp, #16
 874              	.LCFI28:
 875              		.cfi_def_cfa_offset 24
 876 0004 00AF     		add	r7, sp, #0
 877              	.LCFI29:
 878              		.cfi_def_cfa_register 7
 879 0006 7860     		str	r0, [r7, #4]
1161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 880              		.loc 1 1161 21
 881 0008 0023     		movs	r3, #0
 882 000a FB73     		strb	r3, [r7, #15]
1162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      
1166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 883              		.loc 1 1167 3
 884 000c 7B68     		ldr	r3, [r7, #4]
 885 000e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 886 0012 012B     		cmp	r3, #1
 887 0014 01D1     		bne	.L45
 888              		.loc 1 1167 3 is_stmt 0 discriminator 1
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 37


 889 0016 0223     		movs	r3, #2
 890 0018 1AE0     		b	.L46
 891              	.L45:
 892              		.loc 1 1167 3 discriminator 2
 893 001a 7B68     		ldr	r3, [r7, #4]
 894 001c 0122     		movs	r2, #1
 895 001e 83F82420 		strb	r2, [r3, #36]
1168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
1170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
1171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 896              		.loc 1 1171 20 is_stmt 1 discriminator 2
 897 0022 7868     		ldr	r0, [r7, #4]
 898 0024 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 899 0028 0346     		mov	r3, r0
 900 002a FB73     		strb	r3, [r7, #15]
1172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
1174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 901              		.loc 1 1174 6 discriminator 2
 902 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 903 002e 002B     		cmp	r3, #0
 904 0030 09D1     		bne	.L47
1175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
1177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 905              		.loc 1 1177 5
 906 0032 7B68     		ldr	r3, [r7, #4]
 907 0034 9B6A     		ldr	r3, [r3, #40]
 908 0036 23F48853 		bic	r3, r3, #4352
 909 003a 23F00103 		bic	r3, r3, #1
 910 003e 43F00102 		orr	r2, r3, #1
 911 0042 7B68     		ldr	r3, [r7, #4]
 912 0044 9A62     		str	r2, [r3, #40]
 913              	.L47:
1178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
1180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
1183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 914              		.loc 1 1183 3
 915 0046 7B68     		ldr	r3, [r7, #4]
 916 0048 0022     		movs	r2, #0
 917 004a 83F82420 		strb	r2, [r3, #36]
1184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 918              		.loc 1 1186 10
 919 004e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 920              	.L46:
1187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 921              		.loc 1 1187 1
 922 0050 1846     		mov	r0, r3
 923 0052 1037     		adds	r7, r7, #16
 924              	.LCFI30:
 925              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 38


 926 0054 BD46     		mov	sp, r7
 927              	.LCFI31:
 928              		.cfi_def_cfa_register 13
 929              		@ sp needed
 930 0056 80BD     		pop	{r7, pc}
 931              		.cfi_endproc
 932              	.LFE70:
 934              		.section	.text.HAL_ADC_PollForConversion,"ax",%progbits
 935              		.align	1
 936              		.global	HAL_ADC_PollForConversion
 937              		.syntax unified
 938              		.thumb
 939              		.thumb_func
 941              	HAL_ADC_PollForConversion:
 942              	.LFB71:
1188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Wait for regular group conversion to be completed.
1191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   This function cannot be used in a particular setup: ADC configured 
1192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         in DMA mode.
1193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         In this case, DMA resets the flag EOC and polling cannot be
1194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         performed on each conversion.
1195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   On STM32F1 devices, limitation in case of sequencer enabled
1196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         (several ranks selected): polling cannot be done on each 
1197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         conversion inside the sequence. In this case, polling is replaced by
1198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         wait for maximum conversion time.
1199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  Timeout: Timeout value in millisecond.
1201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
1202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
1204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 943              		.loc 1 1204 1
 944              		.cfi_startproc
 945              		@ args = 0, pretend = 0, frame = 24
 946              		@ frame_needed = 1, uses_anonymous_args = 0
 947 0000 90B5     		push	{r4, r7, lr}
 948              	.LCFI32:
 949              		.cfi_def_cfa_offset 12
 950              		.cfi_offset 4, -12
 951              		.cfi_offset 7, -8
 952              		.cfi_offset 14, -4
 953 0002 87B0     		sub	sp, sp, #28
 954              	.LCFI33:
 955              		.cfi_def_cfa_offset 40
 956 0004 00AF     		add	r7, sp, #0
 957              	.LCFI34:
 958              		.cfi_def_cfa_register 7
 959 0006 7860     		str	r0, [r7, #4]
 960 0008 3960     		str	r1, [r7]
1205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0U;
 961              		.loc 1 1205 12
 962 000a 0023     		movs	r3, #0
 963 000c 7B61     		str	r3, [r7, #20]
1206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Variables for polling in case of scan mode enabled and polling for each  */
1208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* conversion.                                                              */
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 39


1209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 964              		.loc 1 1209 17
 965 000e 0023     		movs	r3, #0
 966 0010 FB60     		str	r3, [r7, #12]
1210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 967              		.loc 1 1210 12
 968 0012 0023     		movs	r3, #0
 969 0014 3B61     		str	r3, [r7, #16]
1211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  
1212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Get tick count */
1216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tickstart = HAL_GetTick();
 970              		.loc 1 1216 15
 971 0016 FFF7FEFF 		bl	HAL_GetTick
 972 001a 7861     		str	r0, [r7, #20]
1217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Verification that ADC configuration is compliant with polling for        */
1219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* each conversion:                                                         */
1220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Particular case is ADC configured in DMA mode                            */
1221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 973              		.loc 1 1221 7
 974 001c 7B68     		ldr	r3, [r7, #4]
 975 001e 1B68     		ldr	r3, [r3]
 976 0020 9B68     		ldr	r3, [r3, #8]
 977 0022 03F48073 		and	r3, r3, #256
 978              		.loc 1 1221 6
 979 0026 002B     		cmp	r3, #0
 980 0028 0BD0     		beq	.L49
1222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC state machine to error */
1224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 981              		.loc 1 1224 5
 982 002a 7B68     		ldr	r3, [r7, #4]
 983 002c 9B6A     		ldr	r3, [r3, #40]
 984 002e 43F02002 		orr	r2, r3, #32
 985 0032 7B68     		ldr	r3, [r7, #4]
 986 0034 9A62     		str	r2, [r3, #40]
1225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
1227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 987              		.loc 1 1227 5
 988 0036 7B68     		ldr	r3, [r7, #4]
 989 0038 0022     		movs	r2, #0
 990 003a 83F82420 		strb	r2, [r3, #36]
1228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     return HAL_ERROR;
 991              		.loc 1 1229 12
 992 003e 0123     		movs	r3, #1
 993 0040 D3E0     		b	.L50
 994              	.L49:
1230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Polling for end of conversion: differentiation if single/sequence        */
1233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* conversion.                                                              */
1234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*  - If single conversion for regular group (Scan mode disabled or enabled */
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 40


1235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    with NbrOfConversion =1), flag EOC is used to determine the           */
1236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    conversion completion.                                                */
1237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*  - If sequence conversion for regular group (scan mode enabled and       */
1238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    NbrOfConversion >=2), flag EOC is set only at the end of the          */
1239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    sequence.                                                             */
1240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    To poll for each conversion, the maximum conversion time is computed  */
1241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    from ADC conversion time (selected sampling time + conversion time of */
1242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
1243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
1244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    As flag EOC is not set after each conversion, no timeout status can   */
1245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    be set.                                                               */
1246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 995              		.loc 1 1246 7
 996 0042 7B68     		ldr	r3, [r7, #4]
 997 0044 1B68     		ldr	r3, [r3]
 998 0046 5B68     		ldr	r3, [r3, #4]
 999 0048 03F48073 		and	r3, r3, #256
 1000              		.loc 1 1246 6
 1001 004c 002B     		cmp	r3, #0
 1002 004e 31D1     		bne	.L51
1247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 1003              		.loc 1 1247 7 discriminator 1
 1004 0050 7B68     		ldr	r3, [r7, #4]
 1005 0052 1B68     		ldr	r3, [r3]
 1006 0054 DB6A     		ldr	r3, [r3, #44]
 1007 0056 03F47003 		and	r3, r3, #15728640
1246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 1008              		.loc 1 1246 57 discriminator 1
 1009 005a 002B     		cmp	r3, #0
 1010 005c 2AD1     		bne	.L51
1248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Wait until End of Conversion flag is raised */
1250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 1011              		.loc 1 1250 10
 1012 005e 21E0     		b	.L52
 1013              	.L54:
1251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Check if timeout is disabled (set to infinite wait) */
1253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if(Timeout != HAL_MAX_DELAY)
 1014              		.loc 1 1253 9
 1015 0060 3B68     		ldr	r3, [r7]
 1016 0062 B3F1FF3F 		cmp	r3, #-1
 1017 0066 1DD0     		beq	.L52
1254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 1018              		.loc 1 1255 11
 1019 0068 3B68     		ldr	r3, [r7]
 1020 006a 002B     		cmp	r3, #0
 1021 006c 07D0     		beq	.L53
 1022              		.loc 1 1255 33 discriminator 1
 1023 006e FFF7FEFF 		bl	HAL_GetTick
 1024 0072 0246     		mov	r2, r0
 1025              		.loc 1 1255 47 discriminator 1
 1026 0074 7B69     		ldr	r3, [r7, #20]
 1027 0076 D31A     		subs	r3, r2, r3
 1028              		.loc 1 1255 28 discriminator 1
 1029 0078 3A68     		ldr	r2, [r7]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 41


 1030 007a 9A42     		cmp	r2, r3
 1031 007c 12D2     		bcs	.L52
 1032              	.L53:
1256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
1257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* New check to avoid false timeout detection in case of preemption */
1258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 1033              		.loc 1 1258 14
 1034 007e 7B68     		ldr	r3, [r7, #4]
 1035 0080 1B68     		ldr	r3, [r3]
 1036 0082 1B68     		ldr	r3, [r3]
 1037 0084 03F00203 		and	r3, r3, #2
 1038              		.loc 1 1258 13
 1039 0088 002B     		cmp	r3, #0
 1040 008a 0BD1     		bne	.L52
1259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           {
1260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             /* Update ADC state machine to timeout */
1261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 1041              		.loc 1 1261 13
 1042 008c 7B68     		ldr	r3, [r7, #4]
 1043 008e 9B6A     		ldr	r3, [r3, #40]
 1044 0090 43F00402 		orr	r2, r3, #4
 1045 0094 7B68     		ldr	r3, [r7, #4]
 1046 0096 9A62     		str	r2, [r3, #40]
1262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             
1263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             /* Process unlocked */
1264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             __HAL_UNLOCK(hadc);
 1047              		.loc 1 1264 13
 1048 0098 7B68     		ldr	r3, [r7, #4]
 1049 009a 0022     		movs	r2, #0
 1050 009c 83F82420 		strb	r2, [r3, #36]
1265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             
1266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             return HAL_TIMEOUT;
 1051              		.loc 1 1266 20
 1052 00a0 0323     		movs	r3, #3
 1053 00a2 A2E0     		b	.L50
 1054              	.L52:
1250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1055              		.loc 1 1250 11
 1056 00a4 7B68     		ldr	r3, [r7, #4]
 1057 00a6 1B68     		ldr	r3, [r3]
 1058 00a8 1B68     		ldr	r3, [r3]
 1059 00aa 03F00203 		and	r3, r3, #2
1250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1060              		.loc 1 1250 10
 1061 00ae 002B     		cmp	r3, #0
 1062 00b0 D6D0     		beq	.L54
1246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 1063              		.loc 1 1246 6
 1064 00b2 70E0     		b	.L55
 1065              	.L51:
1267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           }
1268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
1269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
1273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 42


1274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Replace polling by wait for maximum conversion time */
1275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
1276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*    and ADC maximum conversion cycles on all channels.                  */
1277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - Wait for the expected ADC clock cycles delay                        */
1278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
1279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                           / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 1066              		.loc 1 1279 43
 1067 00b4 4F4B     		ldr	r3, .L69
 1068 00b6 1C68     		ldr	r4, [r3]
 1069              		.loc 1 1279 45
 1070 00b8 0220     		movs	r0, #2
 1071 00ba FFF7FEFF 		bl	HAL_RCCEx_GetPeriphCLKFreq
 1072 00be 0346     		mov	r3, r0
 1073              		.loc 1 1279 43
 1074 00c0 B4FBF3F2 		udiv	r2, r4, r3
1280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                          * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 1075              		.loc 1 1280 44
 1076 00c4 7B68     		ldr	r3, [r7, #4]
 1077 00c6 1B68     		ldr	r3, [r3]
 1078 00c8 1969     		ldr	r1, [r3, #16]
 1079 00ca 4B4B     		ldr	r3, .L69+4
 1080 00cc 0B40     		ands	r3, r3, r1
 1081 00ce 002B     		cmp	r3, #0
 1082 00d0 18D1     		bne	.L56
 1083              		.loc 1 1280 44 is_stmt 0 discriminator 1
 1084 00d2 7B68     		ldr	r3, [r7, #4]
 1085 00d4 1B68     		ldr	r3, [r3]
 1086 00d6 D968     		ldr	r1, [r3, #12]
 1087 00d8 484B     		ldr	r3, .L69+8
 1088 00da 0B40     		ands	r3, r3, r1
 1089 00dc 002B     		cmp	r3, #0
 1090 00de 11D1     		bne	.L56
 1091              		.loc 1 1280 44 discriminator 3
 1092 00e0 7B68     		ldr	r3, [r7, #4]
 1093 00e2 1B68     		ldr	r3, [r3]
 1094 00e4 1969     		ldr	r1, [r3, #16]
 1095 00e6 464B     		ldr	r3, .L69+12
 1096 00e8 0B40     		ands	r3, r3, r1
 1097 00ea 002B     		cmp	r3, #0
 1098 00ec 08D1     		bne	.L57
 1099              		.loc 1 1280 44 discriminator 5
 1100 00ee 7B68     		ldr	r3, [r7, #4]
 1101 00f0 1B68     		ldr	r3, [r3]
 1102 00f2 D968     		ldr	r1, [r3, #12]
 1103 00f4 434B     		ldr	r3, .L69+16
 1104 00f6 0B40     		ands	r3, r3, r1
 1105 00f8 002B     		cmp	r3, #0
 1106 00fa 01D1     		bne	.L57
 1107              		.loc 1 1280 44 discriminator 7
 1108 00fc 1423     		movs	r3, #20
 1109 00fe 20E0     		b	.L59
 1110              	.L57:
 1111              		.loc 1 1280 44 discriminator 8
 1112 0100 2923     		movs	r3, #41
 1113 0102 1EE0     		b	.L59
 1114              	.L56:
 1115              		.loc 1 1280 44 discriminator 4
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 43


 1116 0104 7B68     		ldr	r3, [r7, #4]
 1117 0106 1B68     		ldr	r3, [r3]
 1118 0108 1969     		ldr	r1, [r3, #16]
 1119 010a 3D4B     		ldr	r3, .L69+12
 1120 010c 0B40     		ands	r3, r3, r1
 1121 010e 002B     		cmp	r3, #0
 1122 0110 06D1     		bne	.L60
 1123              		.loc 1 1280 44 discriminator 11
 1124 0112 7B68     		ldr	r3, [r7, #4]
 1125 0114 1B68     		ldr	r3, [r3]
 1126 0116 D968     		ldr	r1, [r3, #12]
 1127 0118 3A4B     		ldr	r3, .L69+16
 1128 011a 0B40     		ands	r3, r3, r1
 1129 011c 002B     		cmp	r3, #0
 1130 011e 0DD0     		beq	.L61
 1131              	.L60:
 1132              		.loc 1 1280 44 discriminator 14
 1133 0120 7B68     		ldr	r3, [r7, #4]
 1134 0122 1B68     		ldr	r3, [r3]
 1135 0124 1969     		ldr	r1, [r3, #16]
 1136 0126 384B     		ldr	r3, .L69+20
 1137 0128 0B40     		ands	r3, r3, r1
 1138 012a 002B     		cmp	r3, #0
 1139 012c 08D1     		bne	.L62
 1140              		.loc 1 1280 44 discriminator 15
 1141 012e 7B68     		ldr	r3, [r7, #4]
 1142 0130 1B68     		ldr	r3, [r3]
 1143 0132 D968     		ldr	r1, [r3, #12]
 1144 0134 344B     		ldr	r3, .L69+20
 1145 0136 0B40     		ands	r3, r3, r1
 1146 0138 002B     		cmp	r3, #0
 1147 013a 01D1     		bne	.L62
 1148              	.L61:
 1149              		.loc 1 1280 44 discriminator 17
 1150 013c 5423     		movs	r3, #84
 1151 013e 00E0     		b	.L59
 1152              	.L62:
 1153              		.loc 1 1280 44 discriminator 18
 1154 0140 FC23     		movs	r3, #252
 1155              	.L59:
1278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                           / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 1156              		.loc 1 1278 39 is_stmt 1
 1157 0142 02FB03F3 		mul	r3, r2, r3
 1158 0146 3B61     		str	r3, [r7, #16]
1281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 1159              		.loc 1 1282 10
 1160 0148 21E0     		b	.L64
 1161              	.L67:
1283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Check if timeout is disabled (set to infinite wait) */
1285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if(Timeout != HAL_MAX_DELAY)
 1162              		.loc 1 1285 9
 1163 014a 3B68     		ldr	r3, [r7]
 1164 014c B3F1FF3F 		cmp	r3, #-1
 1165 0150 1AD0     		beq	.L65
1286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 44


1287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 1166              		.loc 1 1287 11
 1167 0152 3B68     		ldr	r3, [r7]
 1168 0154 002B     		cmp	r3, #0
 1169 0156 07D0     		beq	.L66
 1170              		.loc 1 1287 33 discriminator 1
 1171 0158 FFF7FEFF 		bl	HAL_GetTick
 1172 015c 0246     		mov	r2, r0
 1173              		.loc 1 1287 47 discriminator 1
 1174 015e 7B69     		ldr	r3, [r7, #20]
 1175 0160 D31A     		subs	r3, r2, r3
 1176              		.loc 1 1287 28 discriminator 1
 1177 0162 3A68     		ldr	r2, [r7]
 1178 0164 9A42     		cmp	r2, r3
 1179 0166 0FD2     		bcs	.L65
 1180              	.L66:
1288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
1289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* New check to avoid false timeout detection in case of preemption */
1290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 1181              		.loc 1 1290 44
 1182 0168 FB68     		ldr	r3, [r7, #12]
 1183              		.loc 1 1290 13
 1184 016a 3A69     		ldr	r2, [r7, #16]
 1185 016c 9A42     		cmp	r2, r3
 1186 016e 0BD9     		bls	.L65
1291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           {
1292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             /* Update ADC state machine to timeout */
1293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 1187              		.loc 1 1293 13
 1188 0170 7B68     		ldr	r3, [r7, #4]
 1189 0172 9B6A     		ldr	r3, [r3, #40]
 1190 0174 43F00402 		orr	r2, r3, #4
 1191 0178 7B68     		ldr	r3, [r7, #4]
 1192 017a 9A62     		str	r2, [r3, #40]
1294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             /* Process unlocked */
1296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             __HAL_UNLOCK(hadc);
 1193              		.loc 1 1296 13
 1194 017c 7B68     		ldr	r3, [r7, #4]
 1195 017e 0022     		movs	r2, #0
 1196 0180 83F82420 		strb	r2, [r3, #36]
1297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             return HAL_TIMEOUT;
 1197              		.loc 1 1298 20
 1198 0184 0323     		movs	r3, #3
 1199 0186 30E0     		b	.L50
 1200              	.L65:
1299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           }
1300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
1301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       Conversion_Timeout_CPU_cycles ++;
 1201              		.loc 1 1302 37
 1202 0188 FB68     		ldr	r3, [r7, #12]
 1203 018a 0133     		adds	r3, r3, #1
 1204 018c FB60     		str	r3, [r7, #12]
 1205              	.L64:
1282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 45


 1206              		.loc 1 1282 41
 1207 018e FB68     		ldr	r3, [r7, #12]
1282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1208              		.loc 1 1282 10
 1209 0190 3A69     		ldr	r2, [r7, #16]
 1210 0192 9A42     		cmp	r2, r3
 1211 0194 D9D8     		bhi	.L67
 1212              	.L55:
1303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Clear regular group conversion flag */
1307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 1213              		.loc 1 1307 3
 1214 0196 7B68     		ldr	r3, [r7, #4]
 1215 0198 1B68     		ldr	r3, [r3]
 1216 019a 6FF01202 		mvn	r2, #18
 1217 019e 1A60     		str	r2, [r3]
1308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Update ADC state machine */
1310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 1218              		.loc 1 1310 3
 1219 01a0 7B68     		ldr	r3, [r7, #4]
 1220 01a2 9B6A     		ldr	r3, [r3, #40]
 1221 01a4 43F40072 		orr	r2, r3, #512
 1222 01a8 7B68     		ldr	r3, [r7, #4]
 1223 01aa 9A62     		str	r2, [r3, #40]
1311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Determine whether any further conversion upcoming on group regular       */
1313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* by external trigger, continuous mode or scan sequence on going.          */
1314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Note: On STM32F1 devices, in case of sequencer enabled                   */
1315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       (several ranks selected), end of conversion flag is raised         */
1316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       at the end of the sequence.                                        */
1317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 1224              		.loc 1 1317 6
 1225 01ac 7B68     		ldr	r3, [r7, #4]
 1226 01ae 1B68     		ldr	r3, [r3]
 1227 01b0 9B68     		ldr	r3, [r3, #8]
 1228 01b2 03F46023 		and	r3, r3, #917504
 1229              		.loc 1 1317 5
 1230 01b6 B3F5602F 		cmp	r3, #917504
 1231 01ba 15D1     		bne	.L68
1318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 1232              		.loc 1 1318 17 discriminator 1
 1233 01bc 7B68     		ldr	r3, [r7, #4]
 1234 01be 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
1317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 1235              		.loc 1 1317 49 discriminator 1
 1236 01c0 002B     		cmp	r3, #0
 1237 01c2 11D1     		bne	.L68
1319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {   
1320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
1321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 1238              		.loc 1 1321 5
 1239 01c4 7B68     		ldr	r3, [r7, #4]
 1240 01c6 9B6A     		ldr	r3, [r3, #40]
 1241 01c8 23F48072 		bic	r2, r3, #256
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 46


 1242 01cc 7B68     		ldr	r3, [r7, #4]
 1243 01ce 9A62     		str	r2, [r3, #40]
1322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 1244              		.loc 1 1323 9
 1245 01d0 7B68     		ldr	r3, [r7, #4]
 1246 01d2 9B6A     		ldr	r3, [r3, #40]
 1247 01d4 03F48053 		and	r3, r3, #4096
 1248              		.loc 1 1323 8
 1249 01d8 002B     		cmp	r3, #0
 1250 01da 05D1     		bne	.L68
1324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     { 
1325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 1251              		.loc 1 1325 7
 1252 01dc 7B68     		ldr	r3, [r7, #4]
 1253 01de 9B6A     		ldr	r3, [r3, #40]
 1254 01e0 43F00102 		orr	r2, r3, #1
 1255 01e4 7B68     		ldr	r3, [r7, #4]
 1256 01e6 9A62     		str	r2, [r3, #40]
 1257              	.L68:
1326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return ADC state */
1330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
 1258              		.loc 1 1330 10
 1259 01e8 0023     		movs	r3, #0
 1260              	.L50:
1331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1261              		.loc 1 1331 1
 1262 01ea 1846     		mov	r0, r3
 1263 01ec 1C37     		adds	r7, r7, #28
 1264              	.LCFI35:
 1265              		.cfi_def_cfa_offset 12
 1266 01ee BD46     		mov	sp, r7
 1267              	.LCFI36:
 1268              		.cfi_def_cfa_register 13
 1269              		@ sp needed
 1270 01f0 90BD     		pop	{r4, r7, pc}
 1271              	.L70:
 1272 01f2 00BF     		.align	2
 1273              	.L69:
 1274 01f4 00000000 		.word	SystemCoreClock
 1275 01f8 24499224 		.word	613566756
 1276 01fc 24499200 		.word	9586980
 1277 0200 92244912 		.word	306783378
 1278 0204 92244900 		.word	4793490
 1279 0208 49922400 		.word	2396745
 1280              		.cfi_endproc
 1281              	.LFE71:
 1283              		.section	.text.HAL_ADC_PollForEvent,"ax",%progbits
 1284              		.align	1
 1285              		.global	HAL_ADC_PollForEvent
 1286              		.syntax unified
 1287              		.thumb
 1288              		.thumb_func
 1290              	HAL_ADC_PollForEvent:
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 47


 1291              	.LFB72:
1332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Poll for conversion event.
1335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  EventType: the ADC event type.
1337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          This parameter can be one of the following values:
1338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *            @arg ADC_AWD_EVENT: ADC Analog watchdog event.
1339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  Timeout: Timeout value in millisecond.
1340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
1341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Timeou
1343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 1292              		.loc 1 1343 1
 1293              		.cfi_startproc
 1294              		@ args = 0, pretend = 0, frame = 24
 1295              		@ frame_needed = 1, uses_anonymous_args = 0
 1296 0000 80B5     		push	{r7, lr}
 1297              	.LCFI37:
 1298              		.cfi_def_cfa_offset 8
 1299              		.cfi_offset 7, -8
 1300              		.cfi_offset 14, -4
 1301 0002 86B0     		sub	sp, sp, #24
 1302              	.LCFI38:
 1303              		.cfi_def_cfa_offset 32
 1304 0004 00AF     		add	r7, sp, #0
 1305              	.LCFI39:
 1306              		.cfi_def_cfa_register 7
 1307 0006 F860     		str	r0, [r7, #12]
 1308 0008 B960     		str	r1, [r7, #8]
 1309 000a 7A60     		str	r2, [r7, #4]
1344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0U; 
 1310              		.loc 1 1344 12
 1311 000c 0023     		movs	r3, #0
 1312 000e 7B61     		str	r3, [r7, #20]
1345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_EVENT_TYPE(EventType));
1349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Get tick count */
1351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tickstart = HAL_GetTick();
 1313              		.loc 1 1351 15
 1314 0010 FFF7FEFF 		bl	HAL_GetTick
 1315 0014 7861     		str	r0, [r7, #20]
1352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check selected event flag */
1354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   while(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 1316              		.loc 1 1354 8
 1317 0016 22E0     		b	.L72
 1318              	.L75:
1355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
1357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
 1319              		.loc 1 1357 7
 1320 0018 7B68     		ldr	r3, [r7, #4]
 1321 001a B3F1FF3F 		cmp	r3, #-1
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 48


 1322 001e 1ED0     		beq	.L72
1358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 1323              		.loc 1 1359 9
 1324 0020 7B68     		ldr	r3, [r7, #4]
 1325 0022 002B     		cmp	r3, #0
 1326 0024 07D0     		beq	.L73
 1327              		.loc 1 1359 31 discriminator 1
 1328 0026 FFF7FEFF 		bl	HAL_GetTick
 1329 002a 0246     		mov	r2, r0
 1330              		.loc 1 1359 45 discriminator 1
 1331 002c 7B69     		ldr	r3, [r7, #20]
 1332 002e D31A     		subs	r3, r2, r3
 1333              		.loc 1 1359 26 discriminator 1
 1334 0030 7A68     		ldr	r2, [r7, #4]
 1335 0032 9A42     		cmp	r2, r3
 1336 0034 13D2     		bcs	.L72
 1337              	.L73:
1360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* New check to avoid false timeout detection in case of preemption */
1362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 1338              		.loc 1 1362 12
 1339 0036 FB68     		ldr	r3, [r7, #12]
 1340 0038 1B68     		ldr	r3, [r3]
 1341 003a 1A68     		ldr	r2, [r3]
 1342 003c BB68     		ldr	r3, [r7, #8]
 1343 003e 1340     		ands	r3, r3, r2
 1344              		.loc 1 1362 11
 1345 0040 BA68     		ldr	r2, [r7, #8]
 1346 0042 9A42     		cmp	r2, r3
 1347 0044 0BD0     		beq	.L72
1363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
1364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Update ADC state machine to timeout */
1365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 1348              		.loc 1 1365 11
 1349 0046 FB68     		ldr	r3, [r7, #12]
 1350 0048 9B6A     		ldr	r3, [r3, #40]
 1351 004a 43F00402 		orr	r2, r3, #4
 1352 004e FB68     		ldr	r3, [r7, #12]
 1353 0050 9A62     		str	r2, [r3, #40]
1366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Process unlocked */
1368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           __HAL_UNLOCK(hadc);
 1354              		.loc 1 1368 11
 1355 0052 FB68     		ldr	r3, [r7, #12]
 1356 0054 0022     		movs	r2, #0
 1357 0056 83F82420 		strb	r2, [r3, #36]
1369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           return HAL_TIMEOUT;
 1358              		.loc 1 1370 18
 1359 005a 0323     		movs	r3, #3
 1360 005c 13E0     		b	.L74
 1361              	.L72:
1354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 1362              		.loc 1 1354 9
 1363 005e FB68     		ldr	r3, [r7, #12]
 1364 0060 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 49


 1365 0062 1A68     		ldr	r2, [r3]
 1366 0064 BB68     		ldr	r3, [r7, #8]
 1367 0066 1340     		ands	r3, r3, r2
1354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 1368              		.loc 1 1354 8
 1369 0068 BA68     		ldr	r2, [r7, #8]
 1370 006a 9A42     		cmp	r2, r3
 1371 006c D4D1     		bne	.L75
1371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
1372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Analog watchdog (level out of window) event */
1377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set ADC state */
1378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 1372              		.loc 1 1378 3
 1373 006e FB68     		ldr	r3, [r7, #12]
 1374 0070 9B6A     		ldr	r3, [r3, #40]
 1375 0072 43F48032 		orr	r2, r3, #65536
 1376 0076 FB68     		ldr	r3, [r7, #12]
 1377 0078 9A62     		str	r2, [r3, #40]
1379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Clear ADC analog watchdog flag */
1381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 1378              		.loc 1 1381 3
 1379 007a FB68     		ldr	r3, [r7, #12]
 1380 007c 1B68     		ldr	r3, [r3]
 1381 007e 6FF00102 		mvn	r2, #1
 1382 0082 1A60     		str	r2, [r3]
1382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return ADC state */
1384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
 1383              		.loc 1 1384 10
 1384 0084 0023     		movs	r3, #0
 1385              	.L74:
1385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1386              		.loc 1 1385 1
 1387 0086 1846     		mov	r0, r3
 1388 0088 1837     		adds	r7, r7, #24
 1389              	.LCFI40:
 1390              		.cfi_def_cfa_offset 8
 1391 008a BD46     		mov	sp, r7
 1392              	.LCFI41:
 1393              		.cfi_def_cfa_register 13
 1394              		@ sp needed
 1395 008c 80BD     		pop	{r7, pc}
 1396              		.cfi_endproc
 1397              	.LFE72:
 1399              		.section	.text.HAL_ADC_Start_IT,"ax",%progbits
 1400              		.align	1
 1401              		.global	HAL_ADC_Start_IT
 1402              		.syntax unified
 1403              		.thumb
 1404              		.thumb_func
 1406              	HAL_ADC_Start_IT:
 1407              	.LFB73:
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 50


1386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group with interruption.
1389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Interruptions enabled in this function:
1390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - EOC (end of conversion of regular group)
1391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
1394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
1396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 1408              		.loc 1 1396 1
 1409              		.cfi_startproc
 1410              		@ args = 0, pretend = 0, frame = 16
 1411              		@ frame_needed = 1, uses_anonymous_args = 0
 1412 0000 80B5     		push	{r7, lr}
 1413              	.LCFI42:
 1414              		.cfi_def_cfa_offset 8
 1415              		.cfi_offset 7, -8
 1416              		.cfi_offset 14, -4
 1417 0002 84B0     		sub	sp, sp, #16
 1418              	.LCFI43:
 1419              		.cfi_def_cfa_offset 24
 1420 0004 00AF     		add	r7, sp, #0
 1421              	.LCFI44:
 1422              		.cfi_def_cfa_register 7
 1423 0006 7860     		str	r0, [r7, #4]
1397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1424              		.loc 1 1397 21
 1425 0008 0023     		movs	r3, #0
 1426 000a FB73     		strb	r3, [r7, #15]
1398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 1427              		.loc 1 1403 3
 1428 000c 7B68     		ldr	r3, [r7, #4]
 1429 000e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1430 0012 012B     		cmp	r3, #1
 1431 0014 01D1     		bne	.L77
 1432              		.loc 1 1403 3 is_stmt 0 discriminator 1
 1433 0016 0223     		movs	r3, #2
 1434 0018 A0E0     		b	.L78
 1435              	.L77:
 1436              		.loc 1 1403 3 discriminator 2
 1437 001a 7B68     		ldr	r3, [r7, #4]
 1438 001c 0122     		movs	r2, #1
 1439 001e 83F82420 		strb	r2, [r3, #36]
1404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Enable the ADC peripheral */
1406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_Enable(hadc);
 1440              		.loc 1 1406 20 is_stmt 1 discriminator 2
 1441 0022 7868     		ldr	r0, [r7, #4]
 1442 0024 FFF7FEFF 		bl	ADC_Enable
 1443 0028 0346     		mov	r3, r0
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 51


 1444 002a FB73     		strb	r3, [r7, #15]
1407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
1409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 1445              		.loc 1 1409 6 discriminator 2
 1446 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1447 002e 002B     		cmp	r3, #0
 1448 0030 40F08F80 		bne	.L79
1410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state                                                          */
1412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
1413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - Set state bitfield related to regular operation                      */
1414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 1449              		.loc 1 1414 5
 1450 0034 7B68     		ldr	r3, [r7, #4]
 1451 0036 9B6A     		ldr	r3, [r3, #40]
 1452 0038 23F47063 		bic	r3, r3, #3840
 1453 003c 23F00103 		bic	r3, r3, #1
 1454 0040 43F48072 		orr	r2, r3, #256
 1455 0044 7B68     		ldr	r3, [r7, #4]
 1456 0046 9A62     		str	r2, [r3, #40]
1415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC
1416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
1417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set group injected state (from auto-injection) and multimode state     */
1419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* for all cases of multimode: independent mode, multimode ADC master     */
1420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* or multimode ADC slave (for devices with several ADCs):                */
1421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 1457              		.loc 1 1421 9
 1458 0048 7B68     		ldr	r3, [r7, #4]
 1459 004a 1B68     		ldr	r3, [r3]
 1460              		.loc 1 1421 8
 1461 004c 454A     		ldr	r2, .L91
 1462 004e 9342     		cmp	r3, r2
 1463 0050 05D1     		bne	.L80
 1464              		.loc 1 1421 9 discriminator 1
 1465 0052 454B     		ldr	r3, .L91+4
 1466 0054 5B68     		ldr	r3, [r3, #4]
 1467 0056 03F47023 		and	r3, r3, #983040
 1468 005a 002B     		cmp	r3, #0
 1469 005c 15D1     		bne	.L81
 1470              	.L80:
1422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC independent or master) */
1424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 1471              		.loc 1 1424 7
 1472 005e 7B68     		ldr	r3, [r7, #4]
 1473 0060 9B6A     		ldr	r3, [r3, #40]
 1474 0062 23F48012 		bic	r2, r3, #1048576
 1475 0066 7B68     		ldr	r3, [r7, #4]
 1476 0068 9A62     		str	r2, [r3, #40]
1425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 1477              		.loc 1 1428 11
 1478 006a 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 52


 1479 006c 1B68     		ldr	r3, [r3]
 1480 006e 5B68     		ldr	r3, [r3, #4]
 1481 0070 03F48063 		and	r3, r3, #1024
 1482              		.loc 1 1428 10
 1483 0074 002B     		cmp	r3, #0
 1484 0076 26D0     		beq	.L83
1429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 1485              		.loc 1 1430 9
 1486 0078 7B68     		ldr	r3, [r7, #4]
 1487 007a 9B6A     		ldr	r3, [r3, #40]
 1488 007c 23F44053 		bic	r3, r3, #12288
 1489 0080 43F48052 		orr	r2, r3, #4096
 1490 0084 7B68     		ldr	r3, [r7, #4]
 1491 0086 9A62     		str	r2, [r3, #40]
1428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1492              		.loc 1 1428 10
 1493 0088 1DE0     		b	.L83
 1494              	.L81:
1431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC slave) */
1436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 1495              		.loc 1 1436 7
 1496 008a 7B68     		ldr	r3, [r7, #4]
 1497 008c 9B6A     		ldr	r3, [r3, #40]
 1498 008e 43F48012 		orr	r2, r3, #1048576
 1499 0092 7B68     		ldr	r3, [r7, #4]
 1500 0094 9A62     		str	r2, [r3, #40]
1437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 1501              		.loc 1 1440 11
 1502 0096 7B68     		ldr	r3, [r7, #4]
 1503 0098 1B68     		ldr	r3, [r3]
 1504              		.loc 1 1440 10
 1505 009a 334A     		ldr	r2, .L91+4
 1506 009c 9342     		cmp	r3, r2
 1507 009e 04D0     		beq	.L84
 1508              		.loc 1 1440 11 discriminator 2
 1509 00a0 7B68     		ldr	r3, [r7, #4]
 1510 00a2 1B68     		ldr	r3, [r3]
 1511 00a4 2F4A     		ldr	r2, .L91
 1512 00a6 9342     		cmp	r3, r2
 1513 00a8 0DD1     		bne	.L83
 1514              	.L84:
 1515              		.loc 1 1440 11 is_stmt 0 discriminator 3
 1516 00aa 2F4B     		ldr	r3, .L91+4
 1517 00ac 5B68     		ldr	r3, [r3, #4]
 1518 00ae 03F48063 		and	r3, r3, #1024
 1519 00b2 002B     		cmp	r3, #0
 1520 00b4 07D0     		beq	.L83
1441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 53


 1521              		.loc 1 1442 9 is_stmt 1
 1522 00b6 7B68     		ldr	r3, [r7, #4]
 1523 00b8 9B6A     		ldr	r3, [r3, #40]
 1524 00ba 23F44053 		bic	r3, r3, #12288
 1525 00be 43F48052 		orr	r2, r3, #4096
 1526 00c2 7B68     		ldr	r3, [r7, #4]
 1527 00c4 9A62     		str	r2, [r3, #40]
 1528              	.L83:
1443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
1447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 1529              		.loc 1 1447 9
 1530 00c6 7B68     		ldr	r3, [r7, #4]
 1531 00c8 9B6A     		ldr	r3, [r3, #40]
 1532 00ca 03F48053 		and	r3, r3, #4096
 1533              		.loc 1 1447 8
 1534 00ce 002B     		cmp	r3, #0
 1535 00d0 06D0     		beq	.L85
1448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
1450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 1536              		.loc 1 1450 7
 1537 00d2 7B68     		ldr	r3, [r7, #4]
 1538 00d4 DB6A     		ldr	r3, [r3, #44]
 1539 00d6 23F00602 		bic	r2, r3, #6
 1540 00da 7B68     		ldr	r3, [r7, #4]
 1541 00dc DA62     		str	r2, [r3, #44]
 1542 00de 02E0     		b	.L86
 1543              	.L85:
1451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Reset ADC all error code fields */
1455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 1544              		.loc 1 1455 7
 1545 00e0 7B68     		ldr	r3, [r7, #4]
 1546 00e2 0022     		movs	r2, #0
 1547 00e4 DA62     		str	r2, [r3, #44]
 1548              	.L86:
1456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
1459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
1460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
1461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 1549              		.loc 1 1461 5
 1550 00e6 7B68     		ldr	r3, [r7, #4]
 1551 00e8 0022     		movs	r2, #0
 1552 00ea 83F82420 		strb	r2, [r3, #36]
1462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Clear regular group conversion flag and overrun flag */
1464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
1465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 1553              		.loc 1 1465 5
 1554 00ee 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 54


 1555 00f0 1B68     		ldr	r3, [r3]
 1556 00f2 6FF00202 		mvn	r2, #2
 1557 00f6 1A60     		str	r2, [r3]
1466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable end of conversion interrupt for regular group */
1468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 1558              		.loc 1 1468 5
 1559 00f8 7B68     		ldr	r3, [r7, #4]
 1560 00fa 1B68     		ldr	r3, [r3]
 1561 00fc 5A68     		ldr	r2, [r3, #4]
 1562 00fe 7B68     		ldr	r3, [r7, #4]
 1563 0100 1B68     		ldr	r3, [r3]
 1564 0102 42F02002 		orr	r2, r2, #32
 1565 0106 5A60     		str	r2, [r3, #4]
1469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable conversion of regular group.                                    */
1471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If software start has been selected, conversion starts immediately.    */
1472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If external trigger has been selected, conversion will start at next   */
1473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* trigger event.                                                         */
1474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Case of multimode enabled:                                             */ 
1475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
1476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - if ADC is master, ADC is enabled and conversion is started.         */
1477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 1566              		.loc 1 1477 9
 1567 0108 7B68     		ldr	r3, [r7, #4]
 1568 010a 1B68     		ldr	r3, [r3]
 1569 010c 9B68     		ldr	r3, [r3, #8]
 1570 010e 03F46023 		and	r3, r3, #917504
 1571              		.loc 1 1477 8
 1572 0112 B3F5602F 		cmp	r3, #917504
 1573 0116 13D1     		bne	.L87
1478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 1574              		.loc 1 1478 9 discriminator 1
 1575 0118 7B68     		ldr	r3, [r7, #4]
 1576 011a 1B68     		ldr	r3, [r3]
1477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 1577              		.loc 1 1477 50 discriminator 1
 1578 011c 114A     		ldr	r2, .L91
 1579 011e 9342     		cmp	r3, r2
 1580 0120 05D1     		bne	.L88
 1581              		.loc 1 1478 9 discriminator 2
 1582 0122 114B     		ldr	r3, .L91+4
 1583 0124 5B68     		ldr	r3, [r3, #4]
 1584 0126 03F47023 		and	r3, r3, #983040
1477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 1585              		.loc 1 1477 50 discriminator 2
 1586 012a 002B     		cmp	r3, #0
 1587 012c 08D1     		bne	.L87
 1588              	.L88:
1479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start ADC conversion on regular group with SW start */
1481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 1589              		.loc 1 1481 7
 1590 012e 7B68     		ldr	r3, [r7, #4]
 1591 0130 1B68     		ldr	r3, [r3]
 1592 0132 9A68     		ldr	r2, [r3, #8]
 1593 0134 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 55


 1594 0136 1B68     		ldr	r3, [r3]
 1595 0138 42F4A002 		orr	r2, r2, #5242880
 1596 013c 9A60     		str	r2, [r3, #8]
 1597 013e 0CE0     		b	.L90
 1598              	.L87:
1482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start ADC conversion on regular group with external trigger */
1486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 1599              		.loc 1 1486 7
 1600 0140 7B68     		ldr	r3, [r7, #4]
 1601 0142 1B68     		ldr	r3, [r3]
 1602 0144 9A68     		ldr	r2, [r3, #8]
 1603 0146 7B68     		ldr	r3, [r7, #4]
 1604 0148 1B68     		ldr	r3, [r3]
 1605 014a 42F48012 		orr	r2, r2, #1048576
 1606 014e 9A60     		str	r2, [r3, #8]
 1607 0150 03E0     		b	.L90
 1608              	.L79:
1487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
1490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
1492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 1609              		.loc 1 1492 5
 1610 0152 7B68     		ldr	r3, [r7, #4]
 1611 0154 0022     		movs	r2, #0
 1612 0156 83F82420 		strb	r2, [r3, #36]
 1613              	.L90:
1493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 1614              		.loc 1 1496 10
 1615 015a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1616              	.L78:
1497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1617              		.loc 1 1497 1
 1618 015c 1846     		mov	r0, r3
 1619 015e 1037     		adds	r7, r7, #16
 1620              	.LCFI45:
 1621              		.cfi_def_cfa_offset 8
 1622 0160 BD46     		mov	sp, r7
 1623              	.LCFI46:
 1624              		.cfi_def_cfa_register 13
 1625              		@ sp needed
 1626 0162 80BD     		pop	{r7, pc}
 1627              	.L92:
 1628              		.align	2
 1629              	.L91:
 1630 0164 00280140 		.word	1073817600
 1631 0168 00240140 		.word	1073816576
 1632              		.cfi_endproc
 1633              	.LFE73:
 1635              		.section	.text.HAL_ADC_Stop_IT,"ax",%progbits
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 56


 1636              		.align	1
 1637              		.global	HAL_ADC_Stop_IT
 1638              		.syntax unified
 1639              		.thumb
 1640              		.thumb_func
 1642              	HAL_ADC_Stop_IT:
 1643              	.LFB74:
1498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in 
1501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         case of auto_injection mode), disable interrution of 
1502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         end-of-conversion, disable ADC peripheral.
1503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
1507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 1644              		.loc 1 1507 1
 1645              		.cfi_startproc
 1646              		@ args = 0, pretend = 0, frame = 16
 1647              		@ frame_needed = 1, uses_anonymous_args = 0
 1648 0000 80B5     		push	{r7, lr}
 1649              	.LCFI47:
 1650              		.cfi_def_cfa_offset 8
 1651              		.cfi_offset 7, -8
 1652              		.cfi_offset 14, -4
 1653 0002 84B0     		sub	sp, sp, #16
 1654              	.LCFI48:
 1655              		.cfi_def_cfa_offset 24
 1656 0004 00AF     		add	r7, sp, #0
 1657              	.LCFI49:
 1658              		.cfi_def_cfa_register 7
 1659 0006 7860     		str	r0, [r7, #4]
1508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1660              		.loc 1 1508 21
 1661 0008 0023     		movs	r3, #0
 1662 000a FB73     		strb	r3, [r7, #15]
1509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      
1513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 1663              		.loc 1 1514 3
 1664 000c 7B68     		ldr	r3, [r7, #4]
 1665 000e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1666 0012 012B     		cmp	r3, #1
 1667 0014 01D1     		bne	.L94
 1668              		.loc 1 1514 3 is_stmt 0 discriminator 1
 1669 0016 0223     		movs	r3, #2
 1670 0018 22E0     		b	.L95
 1671              	.L94:
 1672              		.loc 1 1514 3 discriminator 2
 1673 001a 7B68     		ldr	r3, [r7, #4]
 1674 001c 0122     		movs	r2, #1
 1675 001e 83F82420 		strb	r2, [r3, #36]
1515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 57


1516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
1517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
1518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 1676              		.loc 1 1518 20 is_stmt 1 discriminator 2
 1677 0022 7868     		ldr	r0, [r7, #4]
 1678 0024 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 1679 0028 0346     		mov	r3, r0
 1680 002a FB73     		strb	r3, [r7, #15]
1519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
1521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 1681              		.loc 1 1521 6 discriminator 2
 1682 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1683 002e 002B     		cmp	r3, #0
 1684 0030 11D1     		bne	.L96
1522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable ADC end of conversion interrupt for regular group */
1524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 1685              		.loc 1 1524 5
 1686 0032 7B68     		ldr	r3, [r7, #4]
 1687 0034 1B68     		ldr	r3, [r3]
 1688 0036 5A68     		ldr	r2, [r3, #4]
 1689 0038 7B68     		ldr	r3, [r7, #4]
 1690 003a 1B68     		ldr	r3, [r3]
 1691 003c 22F02002 		bic	r2, r2, #32
 1692 0040 5A60     		str	r2, [r3, #4]
1525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
1527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 1693              		.loc 1 1527 5
 1694 0042 7B68     		ldr	r3, [r7, #4]
 1695 0044 9B6A     		ldr	r3, [r3, #40]
 1696 0046 23F48853 		bic	r3, r3, #4352
 1697 004a 23F00103 		bic	r3, r3, #1
 1698 004e 43F00102 		orr	r2, r3, #1
 1699 0052 7B68     		ldr	r3, [r7, #4]
 1700 0054 9A62     		str	r2, [r3, #40]
 1701              	.L96:
1528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
1530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
1533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 1702              		.loc 1 1533 3
 1703 0056 7B68     		ldr	r3, [r7, #4]
 1704 0058 0022     		movs	r2, #0
 1705 005a 83F82420 		strb	r2, [r3, #36]
1534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 1706              		.loc 1 1536 10
 1707 005e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1708              	.L95:
1537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1709              		.loc 1 1537 1
 1710 0060 1846     		mov	r0, r3
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 58


 1711 0062 1037     		adds	r7, r7, #16
 1712              	.LCFI50:
 1713              		.cfi_def_cfa_offset 8
 1714 0064 BD46     		mov	sp, r7
 1715              	.LCFI51:
 1716              		.cfi_def_cfa_register 13
 1717              		@ sp needed
 1718 0066 80BD     		pop	{r7, pc}
 1719              		.cfi_endproc
 1720              	.LFE74:
 1722              		.section	.text.HAL_ADC_Start_DMA,"ax",%progbits
 1723              		.align	1
 1724              		.global	HAL_ADC_Start_DMA
 1725              		.syntax unified
 1726              		.thumb
 1727              		.thumb_func
 1729              	HAL_ADC_Start_DMA:
 1730              	.LFB75:
1538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group and transfers result
1541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         through DMA.
1542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Interruptions enabled in this function:
1543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - DMA transfer complete
1544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - DMA half transfer
1545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   For devices with several ADCs: This function is for single-ADC mode 
1547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         only. For multimode, use the dedicated MultimodeStart function.
1548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   On STM32F1 devices, only ADC1 and ADC3 (ADC availability depending
1549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         on devices) have DMA capability.
1550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         ADC2 converted data can be transferred in dual ADC mode using DMA
1551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         of ADC1 (ADC master in multimode).
1552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         In case of using ADC1 with DMA on a device featuring 2 ADC
1553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         instances: ADC1 conversion register DR contains ADC1 conversion 
1554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         result (ADC1 register DR bits 0 to 11) and, additionally, ADC2 last
1555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         conversion result (ADC1 register DR bits 16 to 27). Therefore, to
1556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         have DMA transferring the conversion results of ADC1 only, DMA must
1557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         be configured to transfer size: half word.
1558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  pData: The destination Buffer address.
1560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  Length: The length of data to be transferred from ADC peripheral to memory.
1561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
1564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 1731              		.loc 1 1564 1
 1732              		.cfi_startproc
 1733              		@ args = 0, pretend = 0, frame = 24
 1734              		@ frame_needed = 1, uses_anonymous_args = 0
 1735 0000 80B5     		push	{r7, lr}
 1736              	.LCFI52:
 1737              		.cfi_def_cfa_offset 8
 1738              		.cfi_offset 7, -8
 1739              		.cfi_offset 14, -4
 1740 0002 86B0     		sub	sp, sp, #24
 1741              	.LCFI53:
 1742              		.cfi_def_cfa_offset 32
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 59


 1743 0004 00AF     		add	r7, sp, #0
 1744              	.LCFI54:
 1745              		.cfi_def_cfa_register 7
 1746 0006 F860     		str	r0, [r7, #12]
 1747 0008 B960     		str	r1, [r7, #8]
 1748 000a 7A60     		str	r2, [r7, #4]
1565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1749              		.loc 1 1565 21
 1750 000c 0023     		movs	r3, #0
 1751 000e FB75     		strb	r3, [r7, #23]
1566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
1569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Verification if multimode is disabled (for devices with several ADC)     */
1571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* If multimode is enabled, dedicated function multimode conversion         */
1572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* start DMA must be used.                                                  */
1573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 1752              		.loc 1 1573 6
 1753 0010 FB68     		ldr	r3, [r7, #12]
 1754 0012 1B68     		ldr	r3, [r3]
 1755              		.loc 1 1573 5
 1756 0014 644A     		ldr	r2, .L114
 1757 0016 9342     		cmp	r3, r2
 1758 0018 04D0     		beq	.L98
 1759              		.loc 1 1573 6 discriminator 1
 1760 001a FB68     		ldr	r3, [r7, #12]
 1761 001c 1B68     		ldr	r3, [r3]
 1762 001e 634A     		ldr	r2, .L114+4
 1763 0020 9342     		cmp	r3, r2
 1764 0022 06D1     		bne	.L99
 1765              	.L98:
 1766              		.loc 1 1573 6 is_stmt 0 discriminator 3
 1767 0024 604B     		ldr	r3, .L114
 1768 0026 5B68     		ldr	r3, [r3, #4]
 1769 0028 03F47023 		and	r3, r3, #983040
 1770              		.loc 1 1573 36 is_stmt 1 discriminator 3
 1771 002c 002B     		cmp	r3, #0
 1772 002e 40F0B380 		bne	.L100
 1773              	.L99:
1574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process locked */
1576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_LOCK(hadc);
 1774              		.loc 1 1576 5
 1775 0032 FB68     		ldr	r3, [r7, #12]
 1776 0034 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1777 0038 012B     		cmp	r3, #1
 1778 003a 01D1     		bne	.L101
 1779              		.loc 1 1576 5 is_stmt 0 discriminator 1
 1780 003c 0223     		movs	r3, #2
 1781 003e AEE0     		b	.L102
 1782              	.L101:
 1783              		.loc 1 1576 5 discriminator 2
 1784 0040 FB68     		ldr	r3, [r7, #12]
 1785 0042 0122     		movs	r2, #1
 1786 0044 83F82420 		strb	r2, [r3, #36]
1577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 60


1578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable the ADC peripheral */
1579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_hal_status = ADC_Enable(hadc);
 1787              		.loc 1 1579 22 is_stmt 1 discriminator 2
 1788 0048 F868     		ldr	r0, [r7, #12]
 1789 004a FFF7FEFF 		bl	ADC_Enable
 1790 004e 0346     		mov	r3, r0
 1791 0050 FB75     		strb	r3, [r7, #23]
1580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 1792              		.loc 1 1582 8 discriminator 2
 1793 0052 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1794 0054 002B     		cmp	r3, #0
 1795 0056 40F09A80 		bne	.L103
1583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state                                                        */
1585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 1796              		.loc 1 1587 7
 1797 005a FB68     		ldr	r3, [r7, #12]
 1798 005c 9B6A     		ldr	r3, [r3, #40]
 1799 005e 23F47063 		bic	r3, r3, #3840
 1800 0062 23F00103 		bic	r3, r3, #1
 1801 0066 43F48072 		orr	r2, r3, #256
 1802 006a FB68     		ldr	r3, [r7, #12]
 1803 006c 9A62     		str	r2, [r3, #40]
1588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set group injected state (from auto-injection) and multimode state     */
1592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* for all cases of multimode: independent mode, multimode ADC master     */
1593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* or multimode ADC slave (for devices with several ADCs):                */
1594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 1804              		.loc 1 1594 9
 1805 006e FB68     		ldr	r3, [r7, #12]
 1806 0070 1B68     		ldr	r3, [r3]
 1807              		.loc 1 1594 8
 1808 0072 4E4A     		ldr	r2, .L114+4
 1809 0074 9342     		cmp	r3, r2
 1810 0076 05D1     		bne	.L104
 1811              		.loc 1 1594 9 discriminator 1
 1812 0078 4B4B     		ldr	r3, .L114
 1813 007a 5B68     		ldr	r3, [r3, #4]
 1814 007c 03F47023 		and	r3, r3, #983040
 1815 0080 002B     		cmp	r3, #0
 1816 0082 15D1     		bne	.L105
 1817              	.L104:
1595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC independent or master) */
1597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 1818              		.loc 1 1597 7
 1819 0084 FB68     		ldr	r3, [r7, #12]
 1820 0086 9B6A     		ldr	r3, [r3, #40]
 1821 0088 23F48012 		bic	r2, r3, #1048576
 1822 008c FB68     		ldr	r3, [r7, #12]
 1823 008e 9A62     		str	r2, [r3, #40]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 61


1598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 1824              		.loc 1 1601 11
 1825 0090 FB68     		ldr	r3, [r7, #12]
 1826 0092 1B68     		ldr	r3, [r3]
 1827 0094 5B68     		ldr	r3, [r3, #4]
 1828 0096 03F48063 		and	r3, r3, #1024
 1829              		.loc 1 1601 10
 1830 009a 002B     		cmp	r3, #0
 1831 009c 26D0     		beq	.L107
1602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 1832              		.loc 1 1603 9
 1833 009e FB68     		ldr	r3, [r7, #12]
 1834 00a0 9B6A     		ldr	r3, [r3, #40]
 1835 00a2 23F44053 		bic	r3, r3, #12288
 1836 00a6 43F48052 		orr	r2, r3, #4096
 1837 00aa FB68     		ldr	r3, [r7, #12]
 1838 00ac 9A62     		str	r2, [r3, #40]
1601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1839              		.loc 1 1601 10
 1840 00ae 1DE0     		b	.L107
 1841              	.L105:
1604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC slave) */
1609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 1842              		.loc 1 1609 7
 1843 00b0 FB68     		ldr	r3, [r7, #12]
 1844 00b2 9B6A     		ldr	r3, [r3, #40]
 1845 00b4 43F48012 		orr	r2, r3, #1048576
 1846 00b8 FB68     		ldr	r3, [r7, #12]
 1847 00ba 9A62     		str	r2, [r3, #40]
1610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 1848              		.loc 1 1613 11
 1849 00bc FB68     		ldr	r3, [r7, #12]
 1850 00be 1B68     		ldr	r3, [r3]
 1851              		.loc 1 1613 10
 1852 00c0 394A     		ldr	r2, .L114
 1853 00c2 9342     		cmp	r3, r2
 1854 00c4 04D0     		beq	.L108
 1855              		.loc 1 1613 11 discriminator 2
 1856 00c6 FB68     		ldr	r3, [r7, #12]
 1857 00c8 1B68     		ldr	r3, [r3]
 1858 00ca 384A     		ldr	r2, .L114+4
 1859 00cc 9342     		cmp	r3, r2
 1860 00ce 0DD1     		bne	.L107
 1861              	.L108:
 1862              		.loc 1 1613 11 is_stmt 0 discriminator 3
 1863 00d0 354B     		ldr	r3, .L114
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 62


 1864 00d2 5B68     		ldr	r3, [r3, #4]
 1865 00d4 03F48063 		and	r3, r3, #1024
 1866 00d8 002B     		cmp	r3, #0
 1867 00da 07D0     		beq	.L107
1614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 1868              		.loc 1 1615 9 is_stmt 1
 1869 00dc FB68     		ldr	r3, [r7, #12]
 1870 00de 9B6A     		ldr	r3, [r3, #40]
 1871 00e0 23F44053 		bic	r3, r3, #12288
 1872 00e4 43F48052 		orr	r2, r3, #4096
 1873 00e8 FB68     		ldr	r3, [r7, #12]
 1874 00ea 9A62     		str	r2, [r3, #40]
 1875              	.L107:
1616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* State machine update: Check if an injected conversion is ongoing */
1620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 1876              		.loc 1 1620 11
 1877 00ec FB68     		ldr	r3, [r7, #12]
 1878 00ee 9B6A     		ldr	r3, [r3, #40]
 1879 00f0 03F48053 		and	r3, r3, #4096
 1880              		.loc 1 1620 10
 1881 00f4 002B     		cmp	r3, #0
 1882 00f6 06D0     		beq	.L109
1621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Reset ADC error code fields related to conversions on group regular */
1623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 1883              		.loc 1 1623 9
 1884 00f8 FB68     		ldr	r3, [r7, #12]
 1885 00fa DB6A     		ldr	r3, [r3, #44]
 1886 00fc 23F00602 		bic	r2, r3, #6
 1887 0100 FB68     		ldr	r3, [r7, #12]
 1888 0102 DA62     		str	r2, [r3, #44]
 1889 0104 02E0     		b	.L110
 1890              	.L109:
1624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       else
1626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Reset ADC all error code fields */
1628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_CLEAR_ERRORCODE(hadc);
 1891              		.loc 1 1628 9
 1892 0106 FB68     		ldr	r3, [r7, #12]
 1893 0108 0022     		movs	r2, #0
 1894 010a DA62     		str	r2, [r3, #44]
 1895              	.L110:
1629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Process unlocked */
1632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 1896              		.loc 1 1634 7
 1897 010c FB68     		ldr	r3, [r7, #12]
 1898 010e 0022     		movs	r2, #0
 1899 0110 83F82420 		strb	r2, [r3, #36]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 63


1635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set the DMA transfer complete callback */
1637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 1900              		.loc 1 1637 11
 1901 0114 FB68     		ldr	r3, [r7, #12]
 1902 0116 1B6A     		ldr	r3, [r3, #32]
 1903              		.loc 1 1637 42
 1904 0118 254A     		ldr	r2, .L114+8
 1905 011a 9A62     		str	r2, [r3, #40]
1638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set the DMA half transfer complete callback */
1640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 1906              		.loc 1 1640 11
 1907 011c FB68     		ldr	r3, [r7, #12]
 1908 011e 1B6A     		ldr	r3, [r3, #32]
 1909              		.loc 1 1640 46
 1910 0120 244A     		ldr	r2, .L114+12
 1911 0122 DA62     		str	r2, [r3, #44]
1641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set the DMA error callback */
1643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 1912              		.loc 1 1643 11
 1913 0124 FB68     		ldr	r3, [r7, #12]
 1914 0126 1B6A     		ldr	r3, [r3, #32]
 1915              		.loc 1 1643 43
 1916 0128 234A     		ldr	r2, .L114+16
 1917 012a 1A63     		str	r2, [r3, #48]
1644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC   */
1647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* start (in case of SW start):                                         */
1648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Clear regular group conversion flag and overrun flag */
1650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC           */
1651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* operations)                                                          */
1652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 1918              		.loc 1 1652 7
 1919 012c FB68     		ldr	r3, [r7, #12]
 1920 012e 1B68     		ldr	r3, [r3]
 1921 0130 6FF00202 		mvn	r2, #2
 1922 0134 1A60     		str	r2, [r3]
1653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Enable ADC DMA mode */
1655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 1923              		.loc 1 1655 7
 1924 0136 FB68     		ldr	r3, [r7, #12]
 1925 0138 1B68     		ldr	r3, [r3]
 1926 013a 9A68     		ldr	r2, [r3, #8]
 1927 013c FB68     		ldr	r3, [r7, #12]
 1928 013e 1B68     		ldr	r3, [r3]
 1929 0140 42F48072 		orr	r2, r2, #256
 1930 0144 9A60     		str	r2, [r3, #8]
1656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start the DMA channel */
1658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 1931              		.loc 1 1658 7
 1932 0146 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 64


 1933 0148 186A     		ldr	r0, [r3, #32]
 1934              		.loc 1 1658 57
 1935 014a FB68     		ldr	r3, [r7, #12]
 1936 014c 1B68     		ldr	r3, [r3]
 1937              		.loc 1 1658 52
 1938 014e 4C33     		adds	r3, r3, #76
 1939              		.loc 1 1658 7
 1940 0150 1946     		mov	r1, r3
 1941 0152 BA68     		ldr	r2, [r7, #8]
 1942 0154 7B68     		ldr	r3, [r7, #4]
 1943 0156 FFF7FEFF 		bl	HAL_DMA_Start_IT
1659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* trigger event.                                                       */
1664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 1944              		.loc 1 1664 11
 1945 015a FB68     		ldr	r3, [r7, #12]
 1946 015c 1B68     		ldr	r3, [r3]
 1947 015e 9B68     		ldr	r3, [r3, #8]
 1948 0160 03F46023 		and	r3, r3, #917504
 1949              		.loc 1 1664 10
 1950 0164 B3F5602F 		cmp	r3, #917504
 1951 0168 08D1     		bne	.L111
1665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Start ADC conversion on regular group with SW start */
1667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 1952              		.loc 1 1667 9
 1953 016a FB68     		ldr	r3, [r7, #12]
 1954 016c 1B68     		ldr	r3, [r3]
 1955 016e 9A68     		ldr	r2, [r3, #8]
 1956 0170 FB68     		ldr	r3, [r7, #12]
 1957 0172 1B68     		ldr	r3, [r3]
 1958 0174 42F4A002 		orr	r2, r2, #5242880
 1959 0178 9A60     		str	r2, [r3, #8]
1582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1960              		.loc 1 1582 8
 1961 017a 0FE0     		b	.L113
 1962              	.L111:
1668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       else
1670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Start ADC conversion on regular group with external trigger */
1672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 1963              		.loc 1 1672 9
 1964 017c FB68     		ldr	r3, [r7, #12]
 1965 017e 1B68     		ldr	r3, [r3]
 1966 0180 9A68     		ldr	r2, [r3, #8]
 1967 0182 FB68     		ldr	r3, [r7, #12]
 1968 0184 1B68     		ldr	r3, [r3]
 1969 0186 42F48012 		orr	r2, r2, #1048576
 1970 018a 9A60     		str	r2, [r3, #8]
1582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1971              		.loc 1 1582 8
 1972 018c 06E0     		b	.L113
 1973              	.L103:
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 65


1673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Process unlocked */
1678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 1974              		.loc 1 1678 7
 1975 018e FB68     		ldr	r3, [r7, #12]
 1976 0190 0022     		movs	r2, #0
 1977 0192 83F82420 		strb	r2, [r3, #36]
1582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1978              		.loc 1 1582 8
 1979 0196 01E0     		b	.L113
 1980              	.L100:
1679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
1682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 1981              		.loc 1 1683 20
 1982 0198 0123     		movs	r3, #1
 1983 019a FB75     		strb	r3, [r7, #23]
 1984              	.L113:
1684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 1985              		.loc 1 1687 10
 1986 019c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1987              	.L102:
1688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1988              		.loc 1 1688 1
 1989 019e 1846     		mov	r0, r3
 1990 01a0 1837     		adds	r7, r7, #24
 1991              	.LCFI55:
 1992              		.cfi_def_cfa_offset 8
 1993 01a2 BD46     		mov	sp, r7
 1994              	.LCFI56:
 1995              		.cfi_def_cfa_register 13
 1996              		@ sp needed
 1997 01a4 80BD     		pop	{r7, pc}
 1998              	.L115:
 1999 01a6 00BF     		.align	2
 2000              	.L114:
 2001 01a8 00240140 		.word	1073816576
 2002 01ac 00280140 		.word	1073817600
 2003 01b0 00000000 		.word	ADC_DMAConvCplt
 2004 01b4 00000000 		.word	ADC_DMAHalfConvCplt
 2005 01b8 00000000 		.word	ADC_DMAError
 2006              		.cfi_endproc
 2007              	.LFE75:
 2009              		.section	.text.HAL_ADC_Stop_DMA,"ax",%progbits
 2010              		.align	1
 2011              		.global	HAL_ADC_Stop_DMA
 2012              		.syntax unified
 2013              		.thumb
 2014              		.thumb_func
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 66


 2016              	HAL_ADC_Stop_DMA:
 2017              	.LFB76:
1689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in 
1692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC DMA transfer, disable 
1693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         ADC peripheral.
1694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note:  ADC peripheral disable is forcing stop of potential 
1695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         conversion on injected group. If injected group is under use, it
1696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
1697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   For devices with several ADCs: This function is for single-ADC mode 
1698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         only. For multimode, use the dedicated MultimodeStop function.
1699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   On STM32F1 devices, only ADC1 and ADC3 (ADC availability depending
1700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         on devices) have DMA capability.
1701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status.
1703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
1705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2018              		.loc 1 1705 1
 2019              		.cfi_startproc
 2020              		@ args = 0, pretend = 0, frame = 16
 2021              		@ frame_needed = 1, uses_anonymous_args = 0
 2022 0000 80B5     		push	{r7, lr}
 2023              	.LCFI57:
 2024              		.cfi_def_cfa_offset 8
 2025              		.cfi_offset 7, -8
 2026              		.cfi_offset 14, -4
 2027 0002 84B0     		sub	sp, sp, #16
 2028              	.LCFI58:
 2029              		.cfi_def_cfa_offset 24
 2030 0004 00AF     		add	r7, sp, #0
 2031              	.LCFI59:
 2032              		.cfi_def_cfa_register 7
 2033 0006 7860     		str	r0, [r7, #4]
1706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2034              		.loc 1 1706 21
 2035 0008 0023     		movs	r3, #0
 2036 000a FB73     		strb	r3, [r7, #15]
1707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
1710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      
1711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 2037              		.loc 1 1712 3
 2038 000c 7B68     		ldr	r3, [r7, #4]
 2039 000e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 2040 0012 012B     		cmp	r3, #1
 2041 0014 01D1     		bne	.L117
 2042              		.loc 1 1712 3 is_stmt 0 discriminator 1
 2043 0016 0223     		movs	r3, #2
 2044 0018 39E0     		b	.L118
 2045              	.L117:
 2046              		.loc 1 1712 3 discriminator 2
 2047 001a 7B68     		ldr	r3, [r7, #4]
 2048 001c 0122     		movs	r2, #1
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 67


 2049 001e 83F82420 		strb	r2, [r3, #36]
1713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
1715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
1716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 2050              		.loc 1 1716 20 is_stmt 1 discriminator 2
 2051 0022 7868     		ldr	r0, [r7, #4]
 2052 0024 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 2053 0028 0346     		mov	r3, r0
 2054 002a FB73     		strb	r3, [r7, #15]
1717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
1719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 2055              		.loc 1 1719 6 discriminator 2
 2056 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2057 002e 002B     		cmp	r3, #0
 2058 0030 28D1     		bne	.L119
1720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable ADC DMA mode */
1722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 2059              		.loc 1 1722 5
 2060 0032 7B68     		ldr	r3, [r7, #4]
 2061 0034 1B68     		ldr	r3, [r3]
 2062 0036 9A68     		ldr	r2, [r3, #8]
 2063 0038 7B68     		ldr	r3, [r7, #4]
 2064 003a 1B68     		ldr	r3, [r3]
 2065 003c 22F48072 		bic	r2, r2, #256
 2066 0040 9A60     		str	r2, [r3, #8]
1723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop while */
1725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* DMA transfer is on going)                                              */
1726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 2067              		.loc 1 1726 13
 2068 0042 7B68     		ldr	r3, [r7, #4]
 2069 0044 1B6A     		ldr	r3, [r3, #32]
 2070              		.loc 1 1726 25
 2071 0046 93F82130 		ldrb	r3, [r3, #33]	@ zero_extendqisi2
 2072              		.loc 1 1726 8
 2073 004a 022B     		cmp	r3, #2
 2074 004c 1AD1     		bne	.L119
1727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 2075              		.loc 1 1728 24
 2076 004e 7B68     		ldr	r3, [r7, #4]
 2077 0050 1B6A     		ldr	r3, [r3, #32]
 2078 0052 1846     		mov	r0, r3
 2079 0054 FFF7FEFF 		bl	HAL_DMA_Abort
 2080 0058 0346     		mov	r3, r0
 2081 005a FB73     		strb	r3, [r7, #15]
1729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Check if DMA channel effectively disabled */
1731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (tmp_hal_status == HAL_OK)
 2082              		.loc 1 1731 10
 2083 005c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2084 005e 002B     		cmp	r3, #0
 2085 0060 0AD1     		bne	.L120
1732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 68


1733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
1734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State,
 2086              		.loc 1 1734 9
 2087 0062 7B68     		ldr	r3, [r7, #4]
 2088 0064 9B6A     		ldr	r3, [r3, #40]
 2089 0066 23F48853 		bic	r3, r3, #4352
 2090 006a 23F00103 		bic	r3, r3, #1
 2091 006e 43F00102 		orr	r2, r3, #1
 2092 0072 7B68     		ldr	r3, [r7, #4]
 2093 0074 9A62     		str	r2, [r3, #40]
 2094 0076 05E0     		b	.L119
 2095              	.L120:
1735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                           HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                           HAL_ADC_STATE_READY);
1737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       else
1739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Update ADC state machine to error */
1741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 2096              		.loc 1 1741 9
 2097 0078 7B68     		ldr	r3, [r7, #4]
 2098 007a 9B6A     		ldr	r3, [r3, #40]
 2099 007c 43F04002 		orr	r2, r3, #64
 2100 0080 7B68     		ldr	r3, [r7, #4]
 2101 0082 9A62     		str	r2, [r3, #40]
 2102              	.L119:
1742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
1747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 2103              		.loc 1 1747 3
 2104 0084 7B68     		ldr	r3, [r7, #4]
 2105 0086 0022     		movs	r2, #0
 2106 0088 83F82420 		strb	r2, [r3, #36]
1748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 2107              		.loc 1 1750 10
 2108 008c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2109              	.L118:
1751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2110              		.loc 1 1751 1
 2111 008e 1846     		mov	r0, r3
 2112 0090 1037     		adds	r7, r7, #16
 2113              	.LCFI60:
 2114              		.cfi_def_cfa_offset 8
 2115 0092 BD46     		mov	sp, r7
 2116              	.LCFI61:
 2117              		.cfi_def_cfa_register 13
 2118              		@ sp needed
 2119 0094 80BD     		pop	{r7, pc}
 2120              		.cfi_endproc
 2121              	.LFE76:
 2123              		.section	.text.HAL_ADC_GetValue,"ax",%progbits
 2124              		.align	1
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 69


 2125              		.global	HAL_ADC_GetValue
 2126              		.syntax unified
 2127              		.thumb
 2128              		.thumb_func
 2130              	HAL_ADC_GetValue:
 2131              	.LFB77:
1752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Get ADC regular group conversion result.
1755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Reading register DR automatically clears ADC flag EOC
1756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         (ADC group regular end of unitary conversion).
1757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   This function does not clear ADC flag EOS 
1758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         (ADC group regular end of sequence conversion).
1759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Occurrence of flag EOS rising:
1760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - If sequencer is composed of 1 rank, flag EOS is equivalent
1761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *            to flag EOC.
1762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - If sequencer is composed of several ranks, during the scan
1763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *            sequence flag EOC only is raised, at the end of the scan sequence
1764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *            both flags EOC and EOS are raised.
1765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         To clear this flag, either use function: 
1766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
1767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         model polling: @ref HAL_ADC_PollForConversion() 
1768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
1769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval ADC group regular conversion data
1771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
1773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2132              		.loc 1 1773 1
 2133              		.cfi_startproc
 2134              		@ args = 0, pretend = 0, frame = 8
 2135              		@ frame_needed = 1, uses_anonymous_args = 0
 2136              		@ link register save eliminated.
 2137 0000 80B4     		push	{r7}
 2138              	.LCFI62:
 2139              		.cfi_def_cfa_offset 4
 2140              		.cfi_offset 7, -4
 2141 0002 83B0     		sub	sp, sp, #12
 2142              	.LCFI63:
 2143              		.cfi_def_cfa_offset 16
 2144 0004 00AF     		add	r7, sp, #0
 2145              	.LCFI64:
 2146              		.cfi_def_cfa_register 7
 2147 0006 7860     		str	r0, [r7, #4]
1774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Note: EOC flag is not cleared here by software because automatically     */
1778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       cleared by hardware when reading register DR.                      */
1779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return ADC converted value */ 
1781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return hadc->Instance->DR;
 2148              		.loc 1 1781 14
 2149 0008 7B68     		ldr	r3, [r7, #4]
 2150 000a 1B68     		ldr	r3, [r3]
 2151              		.loc 1 1781 24
 2152 000c DB6C     		ldr	r3, [r3, #76]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 70


1782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2153              		.loc 1 1782 1
 2154 000e 1846     		mov	r0, r3
 2155 0010 0C37     		adds	r7, r7, #12
 2156              	.LCFI65:
 2157              		.cfi_def_cfa_offset 4
 2158 0012 BD46     		mov	sp, r7
 2159              	.LCFI66:
 2160              		.cfi_def_cfa_register 13
 2161              		@ sp needed
 2162 0014 80BC     		pop	{r7}
 2163              	.LCFI67:
 2164              		.cfi_restore 7
 2165              		.cfi_def_cfa_offset 0
 2166 0016 7047     		bx	lr
 2167              		.cfi_endproc
 2168              	.LFE77:
 2170              		.section	.text.HAL_ADC_IRQHandler,"ax",%progbits
 2171              		.align	1
 2172              		.global	HAL_ADC_IRQHandler
 2173              		.syntax unified
 2174              		.thumb
 2175              		.thumb_func
 2177              	HAL_ADC_IRQHandler:
 2178              	.LFB78:
1783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Handles ADC interrupt request  
1786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
1790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2179              		.loc 1 1790 1
 2180              		.cfi_startproc
 2181              		@ args = 0, pretend = 0, frame = 8
 2182              		@ frame_needed = 1, uses_anonymous_args = 0
 2183 0000 80B5     		push	{r7, lr}
 2184              	.LCFI68:
 2185              		.cfi_def_cfa_offset 8
 2186              		.cfi_offset 7, -8
 2187              		.cfi_offset 14, -4
 2188 0002 82B0     		sub	sp, sp, #8
 2189              	.LCFI69:
 2190              		.cfi_def_cfa_offset 16
 2191 0004 00AF     		add	r7, sp, #0
 2192              	.LCFI70:
 2193              		.cfi_def_cfa_register 7
 2194 0006 7860     		str	r0, [r7, #4]
1791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
1794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
1795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* ========== Check End of Conversion flag for regular group ========== */
1798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 71


 2195              		.loc 1 1798 6
 2196 0008 7B68     		ldr	r3, [r7, #4]
 2197 000a 1B68     		ldr	r3, [r3]
 2198 000c 5B68     		ldr	r3, [r3, #4]
 2199 000e 03F02003 		and	r3, r3, #32
 2200              		.loc 1 1798 5
 2201 0012 202B     		cmp	r3, #32
 2202 0014 40D1     		bne	.L124
1799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 2203              		.loc 1 1800 8
 2204 0016 7B68     		ldr	r3, [r7, #4]
 2205 0018 1B68     		ldr	r3, [r3]
 2206 001a 1B68     		ldr	r3, [r3]
 2207 001c 03F00203 		and	r3, r3, #2
 2208              		.loc 1 1800 7
 2209 0020 022B     		cmp	r3, #2
 2210 0022 39D1     		bne	.L124
1801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Update state machine on conversion status if not in error state */
1803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 2211              		.loc 1 1803 11
 2212 0024 7B68     		ldr	r3, [r7, #4]
 2213 0026 9B6A     		ldr	r3, [r3, #40]
 2214 0028 03F01003 		and	r3, r3, #16
 2215              		.loc 1 1803 10
 2216 002c 002B     		cmp	r3, #0
 2217 002e 05D1     		bne	.L125
1804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
1806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 2218              		.loc 1 1806 9
 2219 0030 7B68     		ldr	r3, [r7, #4]
 2220 0032 9B6A     		ldr	r3, [r3, #40]
 2221 0034 43F40072 		orr	r2, r3, #512
 2222 0038 7B68     		ldr	r3, [r7, #4]
 2223 003a 9A62     		str	r2, [r3, #40]
 2224              	.L125:
1807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Determine whether any further conversion upcoming on group regular   */
1810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* by external trigger, continuous mode or scan sequence on going.      */
1811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Note: On STM32F1 devices, in case of sequencer enabled               */
1812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /*       (several ranks selected), end of conversion flag is raised     */
1813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /*       at the end of the sequence.                                    */
1814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 2225              		.loc 1 1814 10
 2226 003c 7B68     		ldr	r3, [r7, #4]
 2227 003e 1B68     		ldr	r3, [r3]
 2228 0040 9B68     		ldr	r3, [r3, #8]
 2229 0042 03F46023 		and	r3, r3, #917504
 2230              		.loc 1 1814 9
 2231 0046 B3F5602F 		cmp	r3, #917504
 2232 004a 1DD1     		bne	.L126
1815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (hadc->Init.ContinuousConvMode == DISABLE)   )
 2233              		.loc 1 1815 21 discriminator 1
 2234 004c 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 72


 2235 004e 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
1814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (hadc->Init.ContinuousConvMode == DISABLE)   )
 2236              		.loc 1 1814 53 discriminator 1
 2237 0050 002B     		cmp	r3, #0
 2238 0052 19D1     		bne	.L126
1816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Disable ADC end of conversion interrupt on group regular */
1818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 2239              		.loc 1 1818 9
 2240 0054 7B68     		ldr	r3, [r7, #4]
 2241 0056 1B68     		ldr	r3, [r3]
 2242 0058 5A68     		ldr	r2, [r3, #4]
 2243 005a 7B68     		ldr	r3, [r7, #4]
 2244 005c 1B68     		ldr	r3, [r3]
 2245 005e 22F02002 		bic	r2, r2, #32
 2246 0062 5A60     		str	r2, [r3, #4]
1819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
1821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 2247              		.loc 1 1821 9
 2248 0064 7B68     		ldr	r3, [r7, #4]
 2249 0066 9B6A     		ldr	r3, [r3, #40]
 2250 0068 23F48072 		bic	r2, r3, #256
 2251 006c 7B68     		ldr	r3, [r7, #4]
 2252 006e 9A62     		str	r2, [r3, #40]
1822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 2253              		.loc 1 1823 13
 2254 0070 7B68     		ldr	r3, [r7, #4]
 2255 0072 9B6A     		ldr	r3, [r3, #40]
 2256 0074 03F48053 		and	r3, r3, #4096
 2257              		.loc 1 1823 12
 2258 0078 002B     		cmp	r3, #0
 2259 007a 05D1     		bne	.L126
1824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
1825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 2260              		.loc 1 1825 11
 2261 007c 7B68     		ldr	r3, [r7, #4]
 2262 007e 9B6A     		ldr	r3, [r3, #40]
 2263 0080 43F00102 		orr	r2, r3, #1
 2264 0084 7B68     		ldr	r3, [r7, #4]
 2265 0086 9A62     		str	r2, [r3, #40]
 2266              	.L126:
1826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
1827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Conversion complete callback */
1830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->ConvCpltCallback(hadc);
1832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #else
1833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_ADC_ConvCpltCallback(hadc);
 2267              		.loc 1 1833 7
 2268 0088 7868     		ldr	r0, [r7, #4]
 2269 008a FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
1834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Clear regular group conversion flag */
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 73


1837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 2270              		.loc 1 1837 7
 2271 008e 7B68     		ldr	r3, [r7, #4]
 2272 0090 1B68     		ldr	r3, [r3]
 2273 0092 6FF01202 		mvn	r2, #18
 2274 0096 1A60     		str	r2, [r3]
 2275              	.L124:
1838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* ========== Check End of Conversion flag for injected group ========== */
1842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 2276              		.loc 1 1842 6
 2277 0098 7B68     		ldr	r3, [r7, #4]
 2278 009a 1B68     		ldr	r3, [r3]
 2279 009c 5B68     		ldr	r3, [r3, #4]
 2280 009e 03F08003 		and	r3, r3, #128
 2281              		.loc 1 1842 5
 2282 00a2 802B     		cmp	r3, #128
 2283 00a4 4FD1     		bne	.L127
1843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 2284              		.loc 1 1844 8
 2285 00a6 7B68     		ldr	r3, [r7, #4]
 2286 00a8 1B68     		ldr	r3, [r3]
 2287 00aa 1B68     		ldr	r3, [r3]
 2288 00ac 03F00403 		and	r3, r3, #4
 2289              		.loc 1 1844 7
 2290 00b0 042B     		cmp	r3, #4
 2291 00b2 48D1     		bne	.L127
1845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Update state machine on conversion status if not in error state */
1847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 2292              		.loc 1 1847 11
 2293 00b4 7B68     		ldr	r3, [r7, #4]
 2294 00b6 9B6A     		ldr	r3, [r3, #40]
 2295 00b8 03F01003 		and	r3, r3, #16
 2296              		.loc 1 1847 10
 2297 00bc 002B     		cmp	r3, #0
 2298 00be 05D1     		bne	.L128
1848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
1850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 2299              		.loc 1 1850 9
 2300 00c0 7B68     		ldr	r3, [r7, #4]
 2301 00c2 9B6A     		ldr	r3, [r3, #40]
 2302 00c4 43F40052 		orr	r2, r3, #8192
 2303 00c8 7B68     		ldr	r3, [r7, #4]
 2304 00ca 9A62     		str	r2, [r3, #40]
 2305              	.L128:
1851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Determine whether any further conversion upcoming on group injected  */
1854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* by external trigger, scan sequence on going or by automatic injected */
1855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* conversion from group regular (same conditions as group regular      */
1856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* interruption disabling above).                                       */
1857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Note: On STM32F1 devices, in case of sequencer enabled               */
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 74


1858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /*       (several ranks selected), end of conversion flag is raised     */
1859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /*       at the end of the sequence.                                    */
1860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 2306              		.loc 1 1860 10
 2307 00cc 7B68     		ldr	r3, [r7, #4]
 2308 00ce 1B68     		ldr	r3, [r3]
 2309 00d0 9B68     		ldr	r3, [r3, #8]
 2310 00d2 03F4E043 		and	r3, r3, #28672
 2311              		.loc 1 1860 9
 2312 00d6 B3F5E04F 		cmp	r3, #28672
 2313 00da 12D0     		beq	.L129
1861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 2314              		.loc 1 1861 11 discriminator 1
 2315 00dc 7B68     		ldr	r3, [r7, #4]
 2316 00de 1B68     		ldr	r3, [r3]
 2317 00e0 5B68     		ldr	r3, [r3, #4]
 2318 00e2 03F48063 		and	r3, r3, #1024
1860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 2319              		.loc 1 1860 67 discriminator 1
 2320 00e6 002B     		cmp	r3, #0
 2321 00e8 25D1     		bne	.L130
1862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 2322              		.loc 1 1862 11
 2323 00ea 7B68     		ldr	r3, [r7, #4]
 2324 00ec 1B68     		ldr	r3, [r3]
 2325 00ee 9B68     		ldr	r3, [r3, #8]
 2326 00f0 03F46023 		and	r3, r3, #917504
1861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 2327              		.loc 1 1861 62
 2328 00f4 B3F5602F 		cmp	r3, #917504
 2329 00f8 1DD1     		bne	.L130
1863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 2330              		.loc 1 1863 22
 2331 00fa 7B68     		ldr	r3, [r7, #4]
 2332 00fc 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
1862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 2333              		.loc 1 1862 54
 2334 00fe 002B     		cmp	r3, #0
 2335 0100 19D1     		bne	.L130
 2336              	.L129:
1864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Disable ADC end of conversion interrupt on group injected */
1866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 2337              		.loc 1 1866 9
 2338 0102 7B68     		ldr	r3, [r7, #4]
 2339 0104 1B68     		ldr	r3, [r3]
 2340 0106 5A68     		ldr	r2, [r3, #4]
 2341 0108 7B68     		ldr	r3, [r7, #4]
 2342 010a 1B68     		ldr	r3, [r3]
 2343 010c 22F08002 		bic	r2, r2, #128
 2344 0110 5A60     		str	r2, [r3, #4]
1867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
1869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 2345              		.loc 1 1869 9
 2346 0112 7B68     		ldr	r3, [r7, #4]
 2347 0114 9B6A     		ldr	r3, [r3, #40]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 75


 2348 0116 23F48052 		bic	r2, r3, #4096
 2349 011a 7B68     		ldr	r3, [r7, #4]
 2350 011c 9A62     		str	r2, [r3, #40]
1870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 2351              		.loc 1 1871 13
 2352 011e 7B68     		ldr	r3, [r7, #4]
 2353 0120 9B6A     		ldr	r3, [r3, #40]
 2354 0122 03F48073 		and	r3, r3, #256
 2355              		.loc 1 1871 12
 2356 0126 002B     		cmp	r3, #0
 2357 0128 05D1     		bne	.L130
1872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         { 
1873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 2358              		.loc 1 1873 11
 2359 012a 7B68     		ldr	r3, [r7, #4]
 2360 012c 9B6A     		ldr	r3, [r3, #40]
 2361 012e 43F00102 		orr	r2, r3, #1
 2362 0132 7B68     		ldr	r3, [r7, #4]
 2363 0134 9A62     		str	r2, [r3, #40]
 2364              	.L130:
1874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
1875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Conversion complete callback */ 
1878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->InjectedConvCpltCallback(hadc);
1880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #else
1881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_ADCEx_InjectedConvCpltCallback(hadc);
 2365              		.loc 1 1881 7
 2366 0136 7868     		ldr	r0, [r7, #4]
 2367 0138 FFF7FEFF 		bl	HAL_ADCEx_InjectedConvCpltCallback
1882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Clear injected group conversion flag */
1885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 2368              		.loc 1 1885 7
 2369 013c 7B68     		ldr	r3, [r7, #4]
 2370 013e 1B68     		ldr	r3, [r3]
 2371 0140 6FF00C02 		mvn	r2, #12
 2372 0144 1A60     		str	r2, [r3]
 2373              	.L127:
1886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    
1889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* ========== Check Analog watchdog flags ========== */
1890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 2374              		.loc 1 1890 6
 2375 0146 7B68     		ldr	r3, [r7, #4]
 2376 0148 1B68     		ldr	r3, [r3]
 2377 014a 5B68     		ldr	r3, [r3, #4]
 2378 014c 03F04003 		and	r3, r3, #64
 2379              		.loc 1 1890 5
 2380 0150 402B     		cmp	r3, #64
 2381 0152 14D1     		bne	.L132
1891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 76


 2382              		.loc 1 1892 8
 2383 0154 7B68     		ldr	r3, [r7, #4]
 2384 0156 1B68     		ldr	r3, [r3]
 2385 0158 1B68     		ldr	r3, [r3]
 2386 015a 03F00103 		and	r3, r3, #1
 2387              		.loc 1 1892 7
 2388 015e 012B     		cmp	r3, #1
 2389 0160 0DD1     		bne	.L132
1893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state */
1895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 2390              		.loc 1 1895 7
 2391 0162 7B68     		ldr	r3, [r7, #4]
 2392 0164 9B6A     		ldr	r3, [r3, #40]
 2393 0166 43F48032 		orr	r2, r3, #65536
 2394 016a 7B68     		ldr	r3, [r7, #4]
 2395 016c 9A62     		str	r2, [r3, #40]
1896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Level out of window callback */ 
1898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->LevelOutOfWindowCallback(hadc);
1900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #else
1901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_ADC_LevelOutOfWindowCallback(hadc);
 2396              		.loc 1 1901 7
 2397 016e 7868     		ldr	r0, [r7, #4]
 2398 0170 FFF7FEFF 		bl	HAL_ADC_LevelOutOfWindowCallback
1902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Clear the ADC analog watchdog flag */
1905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 2399              		.loc 1 1905 7
 2400 0174 7B68     		ldr	r3, [r7, #4]
 2401 0176 1B68     		ldr	r3, [r3]
 2402 0178 6FF00102 		mvn	r2, #1
 2403 017c 1A60     		str	r2, [r3]
 2404              	.L132:
1906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2405              		.loc 1 1909 1
 2406 017e 00BF     		nop
 2407 0180 0837     		adds	r7, r7, #8
 2408              	.LCFI71:
 2409              		.cfi_def_cfa_offset 8
 2410 0182 BD46     		mov	sp, r7
 2411              	.LCFI72:
 2412              		.cfi_def_cfa_register 13
 2413              		@ sp needed
 2414 0184 80BD     		pop	{r7, pc}
 2415              		.cfi_endproc
 2416              	.LFE78:
 2418              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 2419              		.align	1
 2420              		.weak	HAL_ADC_ConvCpltCallback
 2421              		.syntax unified
 2422              		.thumb
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 77


 2423              		.thumb_func
 2425              	HAL_ADC_ConvCpltCallback:
 2426              	.LFB79:
1910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Conversion complete callback in non blocking mode 
1913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
1917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2427              		.loc 1 1917 1
 2428              		.cfi_startproc
 2429              		@ args = 0, pretend = 0, frame = 8
 2430              		@ frame_needed = 1, uses_anonymous_args = 0
 2431              		@ link register save eliminated.
 2432 0000 80B4     		push	{r7}
 2433              	.LCFI73:
 2434              		.cfi_def_cfa_offset 4
 2435              		.cfi_offset 7, -4
 2436 0002 83B0     		sub	sp, sp, #12
 2437              	.LCFI74:
 2438              		.cfi_def_cfa_offset 16
 2439 0004 00AF     		add	r7, sp, #0
 2440              	.LCFI75:
 2441              		.cfi_def_cfa_register 7
 2442 0006 7860     		str	r0, [r7, #4]
1918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
1920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_ConvCpltCallback must be implemented in the user file.
1922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    */
1923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2443              		.loc 1 1923 1
 2444 0008 00BF     		nop
 2445 000a 0C37     		adds	r7, r7, #12
 2446              	.LCFI76:
 2447              		.cfi_def_cfa_offset 4
 2448 000c BD46     		mov	sp, r7
 2449              	.LCFI77:
 2450              		.cfi_def_cfa_register 13
 2451              		@ sp needed
 2452 000e 80BC     		pop	{r7}
 2453              	.LCFI78:
 2454              		.cfi_restore 7
 2455              		.cfi_def_cfa_offset 0
 2456 0010 7047     		bx	lr
 2457              		.cfi_endproc
 2458              	.LFE79:
 2460              		.section	.text.HAL_ADC_ConvHalfCpltCallback,"ax",%progbits
 2461              		.align	1
 2462              		.weak	HAL_ADC_ConvHalfCpltCallback
 2463              		.syntax unified
 2464              		.thumb
 2465              		.thumb_func
 2467              	HAL_ADC_ConvHalfCpltCallback:
 2468              	.LFB80:
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 78


1924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Conversion DMA half-transfer callback in non blocking mode 
1927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
1931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2469              		.loc 1 1931 1
 2470              		.cfi_startproc
 2471              		@ args = 0, pretend = 0, frame = 8
 2472              		@ frame_needed = 1, uses_anonymous_args = 0
 2473              		@ link register save eliminated.
 2474 0000 80B4     		push	{r7}
 2475              	.LCFI79:
 2476              		.cfi_def_cfa_offset 4
 2477              		.cfi_offset 7, -4
 2478 0002 83B0     		sub	sp, sp, #12
 2479              	.LCFI80:
 2480              		.cfi_def_cfa_offset 16
 2481 0004 00AF     		add	r7, sp, #0
 2482              	.LCFI81:
 2483              		.cfi_def_cfa_register 7
 2484 0006 7860     		str	r0, [r7, #4]
1932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
1934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
1936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2485              		.loc 1 1937 1
 2486 0008 00BF     		nop
 2487 000a 0C37     		adds	r7, r7, #12
 2488              	.LCFI82:
 2489              		.cfi_def_cfa_offset 4
 2490 000c BD46     		mov	sp, r7
 2491              	.LCFI83:
 2492              		.cfi_def_cfa_register 13
 2493              		@ sp needed
 2494 000e 80BC     		pop	{r7}
 2495              	.LCFI84:
 2496              		.cfi_restore 7
 2497              		.cfi_def_cfa_offset 0
 2498 0010 7047     		bx	lr
 2499              		.cfi_endproc
 2500              	.LFE80:
 2502              		.section	.text.HAL_ADC_LevelOutOfWindowCallback,"ax",%progbits
 2503              		.align	1
 2504              		.weak	HAL_ADC_LevelOutOfWindowCallback
 2505              		.syntax unified
 2506              		.thumb
 2507              		.thumb_func
 2509              	HAL_ADC_LevelOutOfWindowCallback:
 2510              	.LFB81:
1938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Analog watchdog callback in non blocking mode. 
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 79


1941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
1945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2511              		.loc 1 1945 1
 2512              		.cfi_startproc
 2513              		@ args = 0, pretend = 0, frame = 8
 2514              		@ frame_needed = 1, uses_anonymous_args = 0
 2515              		@ link register save eliminated.
 2516 0000 80B4     		push	{r7}
 2517              	.LCFI85:
 2518              		.cfi_def_cfa_offset 4
 2519              		.cfi_offset 7, -4
 2520 0002 83B0     		sub	sp, sp, #12
 2521              	.LCFI86:
 2522              		.cfi_def_cfa_offset 16
 2523 0004 00AF     		add	r7, sp, #0
 2524              	.LCFI87:
 2525              		.cfi_def_cfa_register 7
 2526 0006 7860     		str	r0, [r7, #4]
1946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
1948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
1950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2527              		.loc 1 1951 1
 2528 0008 00BF     		nop
 2529 000a 0C37     		adds	r7, r7, #12
 2530              	.LCFI88:
 2531              		.cfi_def_cfa_offset 4
 2532 000c BD46     		mov	sp, r7
 2533              	.LCFI89:
 2534              		.cfi_def_cfa_register 13
 2535              		@ sp needed
 2536 000e 80BC     		pop	{r7}
 2537              	.LCFI90:
 2538              		.cfi_restore 7
 2539              		.cfi_def_cfa_offset 0
 2540 0010 7047     		bx	lr
 2541              		.cfi_endproc
 2542              	.LFE81:
 2544              		.section	.text.HAL_ADC_ErrorCallback,"ax",%progbits
 2545              		.align	1
 2546              		.weak	HAL_ADC_ErrorCallback
 2547              		.syntax unified
 2548              		.thumb
 2549              		.thumb_func
 2551              	HAL_ADC_ErrorCallback:
 2552              	.LFB82:
1952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  ADC error callback in non blocking mode
1955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *        (ADC conversion with interruption or transfer by DMA)
1956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 80


1958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
1960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2553              		.loc 1 1960 1
 2554              		.cfi_startproc
 2555              		@ args = 0, pretend = 0, frame = 8
 2556              		@ frame_needed = 1, uses_anonymous_args = 0
 2557              		@ link register save eliminated.
 2558 0000 80B4     		push	{r7}
 2559              	.LCFI91:
 2560              		.cfi_def_cfa_offset 4
 2561              		.cfi_offset 7, -4
 2562 0002 83B0     		sub	sp, sp, #12
 2563              	.LCFI92:
 2564              		.cfi_def_cfa_offset 16
 2565 0004 00AF     		add	r7, sp, #0
 2566              	.LCFI93:
 2567              		.cfi_def_cfa_register 7
 2568 0006 7860     		str	r0, [r7, #4]
1961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
1963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_ErrorCallback must be implemented in the user file.
1965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2569              		.loc 1 1966 1
 2570 0008 00BF     		nop
 2571 000a 0C37     		adds	r7, r7, #12
 2572              	.LCFI94:
 2573              		.cfi_def_cfa_offset 4
 2574 000c BD46     		mov	sp, r7
 2575              	.LCFI95:
 2576              		.cfi_def_cfa_register 13
 2577              		@ sp needed
 2578 000e 80BC     		pop	{r7}
 2579              	.LCFI96:
 2580              		.cfi_restore 7
 2581              		.cfi_def_cfa_offset 0
 2582 0010 7047     		bx	lr
 2583              		.cfi_endproc
 2584              	.LFE82:
 2586              		.section	.text.HAL_ADC_ConfigChannel,"ax",%progbits
 2587              		.align	1
 2588              		.global	HAL_ADC_ConfigChannel
 2589              		.syntax unified
 2590              		.thumb
 2591              		.thumb_func
 2593              	HAL_ADC_ConfigChannel:
 2594              	.LFB83:
1967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
1971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group3 Peripheral Control functions
1974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *  @brief    Peripheral Control functions
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 81


1975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *
1976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @verbatim   
1977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
1978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ##### Peripheral Control functions #####
1979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================  
1980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]  This section provides functions allowing to:
1981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Configure channels on regular group
1982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Configure the analog watchdog
1983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @endverbatim
1985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
1986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Configures the the selected channel to be linked to the regular
1990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         group.
1991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   In case of usage of internal measurement channels:
1992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Vbat/VrefInt/TempSensor.
1993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         These internal paths can be be disabled using function 
1994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         HAL_ADC_DeInit().
1995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
1996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         This function initializes channel into regular group, following  
1997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         calls to this function can be used to reconfigure some parameters 
1998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         of structure "ADC_ChannelConfTypeDef" on the fly, without reseting 
1999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         the ADC.
2000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
2001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
2002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         "ADC_ChannelConfTypeDef".
2003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
2004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  sConfig: Structure of ADC channel for regular group.
2005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
2006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
2008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** { 
 2595              		.loc 1 2008 1
 2596              		.cfi_startproc
 2597              		@ args = 0, pretend = 0, frame = 16
 2598              		@ frame_needed = 1, uses_anonymous_args = 0
 2599              		@ link register save eliminated.
 2600 0000 80B4     		push	{r7}
 2601              	.LCFI97:
 2602              		.cfi_def_cfa_offset 4
 2603              		.cfi_offset 7, -4
 2604 0002 85B0     		sub	sp, sp, #20
 2605              	.LCFI98:
 2606              		.cfi_def_cfa_offset 24
 2607 0004 00AF     		add	r7, sp, #0
 2608              	.LCFI99:
 2609              		.cfi_def_cfa_register 7
 2610 0006 7860     		str	r0, [r7, #4]
 2611 0008 3960     		str	r1, [r7]
2009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2612              		.loc 1 2009 21
 2613 000a 0023     		movs	r3, #0
 2614 000c FB73     		strb	r3, [r7, #15]
2010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0U;
 2615              		.loc 1 2010 17
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 82


 2616 000e 0023     		movs	r3, #0
 2617 0010 BB60     		str	r3, [r7, #8]
2011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
2013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_CHANNEL(sConfig->Channel));
2015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
2016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
2017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
2019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 2618              		.loc 1 2019 3
 2619 0012 7B68     		ldr	r3, [r7, #4]
 2620 0014 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 2621 0018 012B     		cmp	r3, #1
 2622 001a 01D1     		bne	.L138
 2623              		.loc 1 2019 3 is_stmt 0 discriminator 1
 2624 001c 0223     		movs	r3, #2
 2625 001e DCE0     		b	.L139
 2626              	.L138:
 2627              		.loc 1 2019 3 discriminator 2
 2628 0020 7B68     		ldr	r3, [r7, #4]
 2629 0022 0122     		movs	r2, #1
 2630 0024 83F82420 		strb	r2, [r3, #36]
2020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Regular sequence configuration */
2023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* For Rank 1 to 6 */
2024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (sConfig->Rank < 7U)
 2631              		.loc 1 2024 14 is_stmt 1 discriminator 2
 2632 0028 3B68     		ldr	r3, [r7]
 2633 002a 5B68     		ldr	r3, [r3, #4]
 2634              		.loc 1 2024 6 discriminator 2
 2635 002c 062B     		cmp	r3, #6
 2636 002e 1CD8     		bhi	.L140
2025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR3                        ,
 2637              		.loc 1 2026 5
 2638 0030 7B68     		ldr	r3, [r7, #4]
 2639 0032 1B68     		ldr	r3, [r3]
 2640 0034 596B     		ldr	r1, [r3, #52]
 2641 0036 3B68     		ldr	r3, [r7]
 2642 0038 5A68     		ldr	r2, [r3, #4]
 2643 003a 1346     		mov	r3, r2
 2644 003c 9B00     		lsls	r3, r3, #2
 2645 003e 1344     		add	r3, r3, r2
 2646 0040 053B     		subs	r3, r3, #5
 2647 0042 1F22     		movs	r2, #31
 2648 0044 02FA03F3 		lsl	r3, r2, r3
 2649 0048 DB43     		mvns	r3, r3
 2650 004a 1940     		ands	r1, r1, r3
 2651 004c 3B68     		ldr	r3, [r7]
 2652 004e 1868     		ldr	r0, [r3]
 2653 0050 3B68     		ldr	r3, [r7]
 2654 0052 5A68     		ldr	r2, [r3, #4]
 2655 0054 1346     		mov	r3, r2
 2656 0056 9B00     		lsls	r3, r3, #2
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 83


 2657 0058 1344     		add	r3, r3, r2
 2658 005a 053B     		subs	r3, r3, #5
 2659 005c 00FA03F2 		lsl	r2, r0, r3
 2660 0060 7B68     		ldr	r3, [r7, #4]
 2661 0062 1B68     		ldr	r3, [r3]
 2662 0064 0A43     		orrs	r2, r2, r1
 2663 0066 5A63     		str	r2, [r3, #52]
 2664 0068 3CE0     		b	.L141
 2665              	.L140:
2027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
2028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
2029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* For Rank 7 to 12 */
2031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else if (sConfig->Rank < 13U)
 2666              		.loc 1 2031 19
 2667 006a 3B68     		ldr	r3, [r7]
 2668 006c 5B68     		ldr	r3, [r3, #4]
 2669              		.loc 1 2031 11
 2670 006e 0C2B     		cmp	r3, #12
 2671 0070 1CD8     		bhi	.L142
2032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR2                        ,
 2672              		.loc 1 2033 5
 2673 0072 7B68     		ldr	r3, [r7, #4]
 2674 0074 1B68     		ldr	r3, [r3]
 2675 0076 196B     		ldr	r1, [r3, #48]
 2676 0078 3B68     		ldr	r3, [r7]
 2677 007a 5A68     		ldr	r2, [r3, #4]
 2678 007c 1346     		mov	r3, r2
 2679 007e 9B00     		lsls	r3, r3, #2
 2680 0080 1344     		add	r3, r3, r2
 2681 0082 233B     		subs	r3, r3, #35
 2682 0084 1F22     		movs	r2, #31
 2683 0086 02FA03F3 		lsl	r3, r2, r3
 2684 008a DB43     		mvns	r3, r3
 2685 008c 1940     		ands	r1, r1, r3
 2686 008e 3B68     		ldr	r3, [r7]
 2687 0090 1868     		ldr	r0, [r3]
 2688 0092 3B68     		ldr	r3, [r7]
 2689 0094 5A68     		ldr	r2, [r3, #4]
 2690 0096 1346     		mov	r3, r2
 2691 0098 9B00     		lsls	r3, r3, #2
 2692 009a 1344     		add	r3, r3, r2
 2693 009c 233B     		subs	r3, r3, #35
 2694 009e 00FA03F2 		lsl	r2, r0, r3
 2695 00a2 7B68     		ldr	r3, [r7, #4]
 2696 00a4 1B68     		ldr	r3, [r3]
 2697 00a6 0A43     		orrs	r2, r2, r1
 2698 00a8 1A63     		str	r2, [r3, #48]
 2699 00aa 1BE0     		b	.L141
 2700              	.L142:
2034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank)    ,
2035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
2036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* For Rank 13 to 16 */
2038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
2039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 84


2040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR1                        ,
 2701              		.loc 1 2040 5
 2702 00ac 7B68     		ldr	r3, [r7, #4]
 2703 00ae 1B68     		ldr	r3, [r3]
 2704 00b0 D96A     		ldr	r1, [r3, #44]
 2705 00b2 3B68     		ldr	r3, [r7]
 2706 00b4 5A68     		ldr	r2, [r3, #4]
 2707 00b6 1346     		mov	r3, r2
 2708 00b8 9B00     		lsls	r3, r3, #2
 2709 00ba 1344     		add	r3, r3, r2
 2710 00bc 413B     		subs	r3, r3, #65
 2711 00be 1F22     		movs	r2, #31
 2712 00c0 02FA03F3 		lsl	r3, r2, r3
 2713 00c4 DB43     		mvns	r3, r3
 2714 00c6 1940     		ands	r1, r1, r3
 2715 00c8 3B68     		ldr	r3, [r7]
 2716 00ca 1868     		ldr	r0, [r3]
 2717 00cc 3B68     		ldr	r3, [r7]
 2718 00ce 5A68     		ldr	r2, [r3, #4]
 2719 00d0 1346     		mov	r3, r2
 2720 00d2 9B00     		lsls	r3, r3, #2
 2721 00d4 1344     		add	r3, r3, r2
 2722 00d6 413B     		subs	r3, r3, #65
 2723 00d8 00FA03F2 		lsl	r2, r0, r3
 2724 00dc 7B68     		ldr	r3, [r7, #4]
 2725 00de 1B68     		ldr	r3, [r3]
 2726 00e0 0A43     		orrs	r2, r2, r1
 2727 00e2 DA62     		str	r2, [r3, #44]
 2728              	.L141:
2041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank)   ,
2042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
2043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Channel sampling time configuration */
2047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* For channels 10 to 17 */
2048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (sConfig->Channel >= ADC_CHANNEL_10)
 2729              		.loc 1 2048 14
 2730 00e4 3B68     		ldr	r3, [r7]
 2731 00e6 1B68     		ldr	r3, [r3]
 2732              		.loc 1 2048 6
 2733 00e8 092B     		cmp	r3, #9
 2734 00ea 1CD9     		bls	.L143
2049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SMPR1                             ,
 2735              		.loc 1 2050 5
 2736 00ec 7B68     		ldr	r3, [r7, #4]
 2737 00ee 1B68     		ldr	r3, [r3]
 2738 00f0 D968     		ldr	r1, [r3, #12]
 2739 00f2 3B68     		ldr	r3, [r7]
 2740 00f4 1A68     		ldr	r2, [r3]
 2741 00f6 1346     		mov	r3, r2
 2742 00f8 5B00     		lsls	r3, r3, #1
 2743 00fa 1344     		add	r3, r3, r2
 2744 00fc 1E3B     		subs	r3, r3, #30
 2745 00fe 0722     		movs	r2, #7
 2746 0100 02FA03F3 		lsl	r3, r2, r3
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 85


 2747 0104 DB43     		mvns	r3, r3
 2748 0106 1940     		ands	r1, r1, r3
 2749 0108 3B68     		ldr	r3, [r7]
 2750 010a 9868     		ldr	r0, [r3, #8]
 2751 010c 3B68     		ldr	r3, [r7]
 2752 010e 1A68     		ldr	r2, [r3]
 2753 0110 1346     		mov	r3, r2
 2754 0112 5B00     		lsls	r3, r3, #1
 2755 0114 1344     		add	r3, r3, r2
 2756 0116 1E3B     		subs	r3, r3, #30
 2757 0118 00FA03F2 		lsl	r2, r0, r3
 2758 011c 7B68     		ldr	r3, [r7, #4]
 2759 011e 1B68     		ldr	r3, [r3]
 2760 0120 0A43     		orrs	r2, r2, r1
 2761 0122 DA60     		str	r2, [r3, #12]
 2762 0124 19E0     		b	.L144
 2763              	.L143:
2051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
2052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
2053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else /* For channels 0 to 9 */
2055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SMPR2                             ,
 2764              		.loc 1 2056 5
 2765 0126 7B68     		ldr	r3, [r7, #4]
 2766 0128 1B68     		ldr	r3, [r3]
 2767 012a 1969     		ldr	r1, [r3, #16]
 2768 012c 3B68     		ldr	r3, [r7]
 2769 012e 1A68     		ldr	r2, [r3]
 2770 0130 1346     		mov	r3, r2
 2771 0132 5B00     		lsls	r3, r3, #1
 2772 0134 1344     		add	r3, r3, r2
 2773 0136 0722     		movs	r2, #7
 2774 0138 02FA03F3 		lsl	r3, r2, r3
 2775 013c DB43     		mvns	r3, r3
 2776 013e 1940     		ands	r1, r1, r3
 2777 0140 3B68     		ldr	r3, [r7]
 2778 0142 9868     		ldr	r0, [r3, #8]
 2779 0144 3B68     		ldr	r3, [r7]
 2780 0146 1A68     		ldr	r2, [r3]
 2781 0148 1346     		mov	r3, r2
 2782 014a 5B00     		lsls	r3, r3, #1
 2783 014c 1344     		add	r3, r3, r2
 2784 014e 00FA03F2 		lsl	r2, r0, r3
 2785 0152 7B68     		ldr	r3, [r7, #4]
 2786 0154 1B68     		ldr	r3, [r3]
 2787 0156 0A43     		orrs	r2, r2, r1
 2788 0158 1A61     		str	r2, [r3, #16]
 2789              	.L144:
2057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel)       ,
2058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
2059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
2062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* and VREFINT measurement path.                                            */
2063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 2790              		.loc 1 2063 15
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 86


 2791 015a 3B68     		ldr	r3, [r7]
 2792 015c 1B68     		ldr	r3, [r3]
 2793              		.loc 1 2063 6
 2794 015e 102B     		cmp	r3, #16
 2795 0160 03D0     		beq	.L145
2064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 2796              		.loc 1 2064 15 discriminator 1
 2797 0162 3B68     		ldr	r3, [r7]
 2798 0164 1B68     		ldr	r3, [r3]
2063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 2799              		.loc 1 2063 52 discriminator 1
 2800 0166 112B     		cmp	r3, #17
 2801 0168 32D1     		bne	.L146
 2802              	.L145:
2065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
2067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* measurement channels (VrefInt/TempSensor). If these channels are       */
2068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* intended to be set on other ADC instances, an error is reported.       */
2069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (hadc->Instance == ADC1)
 2803              		.loc 1 2069 13
 2804 016a 7B68     		ldr	r3, [r7, #4]
 2805 016c 1B68     		ldr	r3, [r3]
 2806              		.loc 1 2069 8
 2807 016e 1D4A     		ldr	r2, .L150
 2808 0170 9342     		cmp	r3, r2
 2809 0172 25D1     		bne	.L147
2070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
2071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 2810              		.loc 1 2071 11
 2811 0174 7B68     		ldr	r3, [r7, #4]
 2812 0176 1B68     		ldr	r3, [r3]
 2813 0178 9B68     		ldr	r3, [r3, #8]
 2814 017a 03F40003 		and	r3, r3, #8388608
 2815              		.loc 1 2071 10
 2816 017e 002B     		cmp	r3, #0
 2817 0180 26D1     		bne	.L146
2072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
2073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 2818              		.loc 1 2073 9
 2819 0182 7B68     		ldr	r3, [r7, #4]
 2820 0184 1B68     		ldr	r3, [r3]
 2821 0186 9A68     		ldr	r2, [r3, #8]
 2822 0188 7B68     		ldr	r3, [r7, #4]
 2823 018a 1B68     		ldr	r3, [r3]
 2824 018c 42F40002 		orr	r2, r2, #8388608
 2825 0190 9A60     		str	r2, [r3, #8]
2074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
2075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 2826              		.loc 1 2075 20
 2827 0192 3B68     		ldr	r3, [r7]
 2828 0194 1B68     		ldr	r3, [r3]
 2829              		.loc 1 2075 12
 2830 0196 102B     		cmp	r3, #16
 2831 0198 1AD1     		bne	.L146
2076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
2077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Delay for temperature sensor stabilization time */
2078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Compute number of CPU cycles to wait for */
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 87


2079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 2832              		.loc 1 2079 73
 2833 019a 134B     		ldr	r3, .L150+4
 2834 019c 1B68     		ldr	r3, [r3]
 2835 019e 134A     		ldr	r2, .L150+8
 2836 01a0 A2FB0323 		umull	r2, r3, r2, r3
 2837 01a4 9A0C     		lsrs	r2, r3, #18
 2838              		.loc 1 2079 54
 2839 01a6 1346     		mov	r3, r2
 2840 01a8 9B00     		lsls	r3, r3, #2
 2841 01aa 1344     		add	r3, r3, r2
 2842 01ac 5B00     		lsls	r3, r3, #1
 2843              		.loc 1 2079 27
 2844 01ae BB60     		str	r3, [r7, #8]
2080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           while(wait_loop_index != 0U)
 2845              		.loc 1 2080 16
 2846 01b0 02E0     		b	.L148
 2847              	.L149:
2081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           {
2082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             wait_loop_index--;
 2848              		.loc 1 2082 28
 2849 01b2 BB68     		ldr	r3, [r7, #8]
 2850 01b4 013B     		subs	r3, r3, #1
 2851 01b6 BB60     		str	r3, [r7, #8]
 2852              	.L148:
2080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           while(wait_loop_index != 0U)
 2853              		.loc 1 2080 33
 2854 01b8 BB68     		ldr	r3, [r7, #8]
2080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           while(wait_loop_index != 0U)
 2855              		.loc 1 2080 16
 2856 01ba 002B     		cmp	r3, #0
 2857 01bc F9D1     		bne	.L149
 2858 01be 07E0     		b	.L146
 2859              	.L147:
2083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           }
2084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
2085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
2086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
2087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
2088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
2089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Update ADC state machine to error */
2090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 2860              		.loc 1 2090 7
 2861 01c0 7B68     		ldr	r3, [r7, #4]
 2862 01c2 9B6A     		ldr	r3, [r3, #40]
 2863 01c4 43F02002 		orr	r2, r3, #32
 2864 01c8 7B68     		ldr	r3, [r7, #4]
 2865 01ca 9A62     		str	r2, [r3, #40]
2091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
2092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       tmp_hal_status = HAL_ERROR;
 2866              		.loc 1 2092 22
 2867 01cc 0123     		movs	r3, #1
 2868 01ce FB73     		strb	r3, [r7, #15]
 2869              	.L146:
2093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
2094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 88


2096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
2097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 2870              		.loc 1 2097 3
 2871 01d0 7B68     		ldr	r3, [r7, #4]
 2872 01d2 0022     		movs	r2, #0
 2873 01d4 83F82420 		strb	r2, [r3, #36]
2098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2099:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
2100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 2874              		.loc 1 2100 10
 2875 01d8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2876              	.L139:
2101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2877              		.loc 1 2101 1
 2878 01da 1846     		mov	r0, r3
 2879 01dc 1437     		adds	r7, r7, #20
 2880              	.LCFI100:
 2881              		.cfi_def_cfa_offset 4
 2882 01de BD46     		mov	sp, r7
 2883              	.LCFI101:
 2884              		.cfi_def_cfa_register 13
 2885              		@ sp needed
 2886 01e0 80BC     		pop	{r7}
 2887              	.LCFI102:
 2888              		.cfi_restore 7
 2889              		.cfi_def_cfa_offset 0
 2890 01e2 7047     		bx	lr
 2891              	.L151:
 2892              		.align	2
 2893              	.L150:
 2894 01e4 00240140 		.word	1073816576
 2895 01e8 00000000 		.word	SystemCoreClock
 2896 01ec 83DE1B43 		.word	1125899907
 2897              		.cfi_endproc
 2898              	.LFE83:
 2900              		.section	.text.HAL_ADC_AnalogWDGConfig,"ax",%progbits
 2901              		.align	1
 2902              		.global	HAL_ADC_AnalogWDGConfig
 2903              		.syntax unified
 2904              		.thumb
 2905              		.thumb_func
 2907              	HAL_ADC_AnalogWDGConfig:
 2908              	.LFB84:
2102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Configures the analog watchdog.
2105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Analog watchdog thresholds can be modified while ADC conversion
2106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         is on going.
2107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         In this case, some constraints must be taken into account:
2108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         the programmed threshold values are effective from the next
2109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         ADC EOC (end of unitary conversion).
2110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Considering that registers write delay may happen due to
2111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         bus activity, this might cause an uncertainty on the
2112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         effective timing of the new programmed threshold values.
2113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
2114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
2115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 89


2116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* Analog
2118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2909              		.loc 1 2118 1
 2910              		.cfi_startproc
 2911              		@ args = 0, pretend = 0, frame = 8
 2912              		@ frame_needed = 1, uses_anonymous_args = 0
 2913              		@ link register save eliminated.
 2914 0000 80B4     		push	{r7}
 2915              	.LCFI103:
 2916              		.cfi_def_cfa_offset 4
 2917              		.cfi_offset 7, -4
 2918 0002 83B0     		sub	sp, sp, #12
 2919              	.LCFI104:
 2920              		.cfi_def_cfa_offset 16
 2921 0004 00AF     		add	r7, sp, #0
 2922              	.LCFI105:
 2923              		.cfi_def_cfa_register 7
 2924 0006 7860     		str	r0, [r7, #4]
 2925 0008 3960     		str	r1, [r7]
2119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
2120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
2122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
2123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
2124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
2125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 2926              		.loc 1 2126 22
 2927 000a 3B68     		ldr	r3, [r7]
 2928 000c 1B68     		ldr	r3, [r3]
 2929              		.loc 1 2126 5
 2930 000e 244A     		ldr	r2, .L158
 2931 0010 9342     		cmp	r3, r2
 2932 0012 03D0     		beq	.L153
2127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 2933              		.loc 1 2127 22 discriminator 1
 2934 0014 3B68     		ldr	r3, [r7]
 2935 0016 1B68     		ldr	r3, [r3]
2126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 2936              		.loc 1 2126 75 discriminator 1
 2937 0018 224A     		ldr	r2, .L158+4
 2938 001a 9342     		cmp	r3, r2
 2939              	.L153:
2128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REGINJEC)  )
2129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
2131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
2134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 2940              		.loc 1 2134 3
 2941 001c 7B68     		ldr	r3, [r7, #4]
 2942 001e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 2943 0022 012B     		cmp	r3, #1
 2944 0024 01D1     		bne	.L154
 2945              		.loc 1 2134 3 is_stmt 0 discriminator 1
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 90


 2946 0026 0223     		movs	r3, #2
 2947 0028 35E0     		b	.L155
 2948              	.L154:
 2949              		.loc 1 2134 3 discriminator 2
 2950 002a 7B68     		ldr	r3, [r7, #4]
 2951 002c 0122     		movs	r2, #1
 2952 002e 83F82420 		strb	r2, [r3, #36]
2135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Analog watchdog configuration */
2137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Configure ADC Analog watchdog interrupt */
2139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(AnalogWDGConfig->ITMode == ENABLE)
 2953              		.loc 1 2139 21 is_stmt 1 discriminator 2
 2954 0032 3B68     		ldr	r3, [r7]
 2955 0034 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 2956              		.loc 1 2139 5 discriminator 2
 2957 0036 012B     		cmp	r3, #1
 2958 0038 08D1     		bne	.L156
2140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable the ADC Analog watchdog interrupt */
2142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 2959              		.loc 1 2142 5
 2960 003a 7B68     		ldr	r3, [r7, #4]
 2961 003c 1B68     		ldr	r3, [r3]
 2962 003e 5A68     		ldr	r2, [r3, #4]
 2963 0040 7B68     		ldr	r3, [r7, #4]
 2964 0042 1B68     		ldr	r3, [r3]
 2965 0044 42F04002 		orr	r2, r2, #64
 2966 0048 5A60     		str	r2, [r3, #4]
 2967 004a 07E0     		b	.L157
 2968              	.L156:
2143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
2145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable the ADC Analog watchdog interrupt */
2147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 2969              		.loc 1 2147 5
 2970 004c 7B68     		ldr	r3, [r7, #4]
 2971 004e 1B68     		ldr	r3, [r3]
 2972 0050 5A68     		ldr	r2, [r3, #4]
 2973 0052 7B68     		ldr	r3, [r7, #4]
 2974 0054 1B68     		ldr	r3, [r3]
 2975 0056 22F04002 		bic	r2, r2, #64
 2976 005a 5A60     		str	r2, [r3, #4]
 2977              	.L157:
2148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Configuration of analog watchdog:                                        */
2151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
2152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    one or all channels.                                                  */
2153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*  - Set the Analog watchdog channel (is not used if watchdog              */
2154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
2155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   MODIFY_REG(hadc->Instance->CR1            ,
 2978              		.loc 1 2155 3
 2979 005c 7B68     		ldr	r3, [r7, #4]
 2980 005e 1B68     		ldr	r3, [r3]
 2981 0060 5A68     		ldr	r2, [r3, #4]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 91


 2982 0062 114B     		ldr	r3, .L158+8
 2983 0064 1340     		ands	r3, r3, r2
 2984 0066 3A68     		ldr	r2, [r7]
 2985 0068 1168     		ldr	r1, [r2]
 2986 006a 3A68     		ldr	r2, [r7]
 2987 006c 5268     		ldr	r2, [r2, #4]
 2988 006e 1143     		orrs	r1, r1, r2
 2989 0070 7A68     		ldr	r2, [r7, #4]
 2990 0072 1268     		ldr	r2, [r2]
 2991 0074 0B43     		orrs	r3, r3, r1
 2992 0076 5360     		str	r3, [r2, #4]
2156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC_CR1_AWDSGL |
2157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC_CR1_JAWDEN |
2158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC_CR1_AWDEN  |
2159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC_CR1_AWDCH                  ,
2160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              AnalogWDGConfig->WatchdogMode |
2161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              AnalogWDGConfig->Channel        );
2162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set the high threshold */
2164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
 2993              		.loc 1 2164 3
 2994 0078 7B68     		ldr	r3, [r7, #4]
 2995 007a 1B68     		ldr	r3, [r3]
 2996 007c 3A68     		ldr	r2, [r7]
 2997 007e D268     		ldr	r2, [r2, #12]
 2998 0080 5A62     		str	r2, [r3, #36]
2165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set the low threshold */
2167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
 2999              		.loc 1 2167 3
 3000 0082 7B68     		ldr	r3, [r7, #4]
 3001 0084 1B68     		ldr	r3, [r3]
 3002 0086 3A68     		ldr	r2, [r7]
 3003 0088 1269     		ldr	r2, [r2, #16]
 3004 008a 9A62     		str	r2, [r3, #40]
2168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
2170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 3005              		.loc 1 2170 3
 3006 008c 7B68     		ldr	r3, [r7, #4]
 3007 008e 0022     		movs	r2, #0
 3008 0090 83F82420 		strb	r2, [r3, #36]
2171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
2173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
 3009              		.loc 1 2173 10
 3010 0094 0023     		movs	r3, #0
 3011              	.L155:
2174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3012              		.loc 1 2174 1
 3013 0096 1846     		mov	r0, r3
 3014 0098 0C37     		adds	r7, r7, #12
 3015              	.LCFI106:
 3016              		.cfi_def_cfa_offset 4
 3017 009a BD46     		mov	sp, r7
 3018              	.LCFI107:
 3019              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 92


 3020              		@ sp needed
 3021 009c 80BC     		pop	{r7}
 3022              	.LCFI108:
 3023              		.cfi_restore 7
 3024              		.cfi_def_cfa_offset 0
 3025 009e 7047     		bx	lr
 3026              	.L159:
 3027              		.align	2
 3028              	.L158:
 3029 00a0 00028000 		.word	8389120
 3030 00a4 00024000 		.word	4194816
 3031 00a8 E0FD3FFF 		.word	-12583456
 3032              		.cfi_endproc
 3033              	.LFE84:
 3035              		.section	.text.HAL_ADC_GetState,"ax",%progbits
 3036              		.align	1
 3037              		.global	HAL_ADC_GetState
 3038              		.syntax unified
 3039              		.thumb
 3040              		.thumb_func
 3042              	HAL_ADC_GetState:
 3043              	.LFB85:
2175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
2179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group4 Peripheral State functions
2183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *  @brief    Peripheral State functions
2184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *
2185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @verbatim
2186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
2187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             ##### Peripheral State and Errors functions #####
2188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================  
2189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
2190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     This subsection provides functions to get in run-time the status of the  
2191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     peripheral.
2192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Check the ADC state
2193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Check the ADC error code
2194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @endverbatim
2196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
2197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  return the ADC state
2201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
2202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL state
2203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
2205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 3044              		.loc 1 2205 1
 3045              		.cfi_startproc
 3046              		@ args = 0, pretend = 0, frame = 8
 3047              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 93


 3048              		@ link register save eliminated.
 3049 0000 80B4     		push	{r7}
 3050              	.LCFI109:
 3051              		.cfi_def_cfa_offset 4
 3052              		.cfi_offset 7, -4
 3053 0002 83B0     		sub	sp, sp, #12
 3054              	.LCFI110:
 3055              		.cfi_def_cfa_offset 16
 3056 0004 00AF     		add	r7, sp, #0
 3057              	.LCFI111:
 3058              		.cfi_def_cfa_register 7
 3059 0006 7860     		str	r0, [r7, #4]
2206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return ADC state */
2207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return hadc->State;
 3060              		.loc 1 2207 14
 3061 0008 7B68     		ldr	r3, [r7, #4]
 3062 000a 9B6A     		ldr	r3, [r3, #40]
2208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3063              		.loc 1 2208 1
 3064 000c 1846     		mov	r0, r3
 3065 000e 0C37     		adds	r7, r7, #12
 3066              	.LCFI112:
 3067              		.cfi_def_cfa_offset 4
 3068 0010 BD46     		mov	sp, r7
 3069              	.LCFI113:
 3070              		.cfi_def_cfa_register 13
 3071              		@ sp needed
 3072 0012 80BC     		pop	{r7}
 3073              	.LCFI114:
 3074              		.cfi_restore 7
 3075              		.cfi_def_cfa_offset 0
 3076 0014 7047     		bx	lr
 3077              		.cfi_endproc
 3078              	.LFE85:
 3080              		.section	.text.HAL_ADC_GetError,"ax",%progbits
 3081              		.align	1
 3082              		.global	HAL_ADC_GetError
 3083              		.syntax unified
 3084              		.thumb
 3085              		.thumb_func
 3087              	HAL_ADC_GetError:
 3088              	.LFB86:
2209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Return the ADC error code
2212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
2213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval ADC Error Code
2214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
2216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 3089              		.loc 1 2216 1
 3090              		.cfi_startproc
 3091              		@ args = 0, pretend = 0, frame = 8
 3092              		@ frame_needed = 1, uses_anonymous_args = 0
 3093              		@ link register save eliminated.
 3094 0000 80B4     		push	{r7}
 3095              	.LCFI115:
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 94


 3096              		.cfi_def_cfa_offset 4
 3097              		.cfi_offset 7, -4
 3098 0002 83B0     		sub	sp, sp, #12
 3099              	.LCFI116:
 3100              		.cfi_def_cfa_offset 16
 3101 0004 00AF     		add	r7, sp, #0
 3102              	.LCFI117:
 3103              		.cfi_def_cfa_register 7
 3104 0006 7860     		str	r0, [r7, #4]
2217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return hadc->ErrorCode;
 3105              		.loc 1 2217 14
 3106 0008 7B68     		ldr	r3, [r7, #4]
 3107 000a DB6A     		ldr	r3, [r3, #44]
2218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3108              		.loc 1 2218 1
 3109 000c 1846     		mov	r0, r3
 3110 000e 0C37     		adds	r7, r7, #12
 3111              	.LCFI118:
 3112              		.cfi_def_cfa_offset 4
 3113 0010 BD46     		mov	sp, r7
 3114              	.LCFI119:
 3115              		.cfi_def_cfa_register 13
 3116              		@ sp needed
 3117 0012 80BC     		pop	{r7}
 3118              	.LCFI120:
 3119              		.cfi_restore 7
 3120              		.cfi_def_cfa_offset 0
 3121 0014 7047     		bx	lr
 3122              		.cfi_endproc
 3123              	.LFE86:
 3125              		.section	.text.ADC_Enable,"ax",%progbits
 3126              		.align	1
 3127              		.global	ADC_Enable
 3128              		.syntax unified
 3129              		.thumb
 3130              		.thumb_func
 3132              	ADC_Enable:
 3133              	.LFB87:
2219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
2222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
2226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
2229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
2230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Enable the selected ADC.
2234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC must be disabled
2235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
2236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
2237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status.
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 95


2238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
2240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 3134              		.loc 1 2240 1
 3135              		.cfi_startproc
 3136              		@ args = 0, pretend = 0, frame = 16
 3137              		@ frame_needed = 1, uses_anonymous_args = 0
 3138 0000 80B5     		push	{r7, lr}
 3139              	.LCFI121:
 3140              		.cfi_def_cfa_offset 8
 3141              		.cfi_offset 7, -8
 3142              		.cfi_offset 14, -4
 3143 0002 84B0     		sub	sp, sp, #16
 3144              	.LCFI122:
 3145              		.cfi_def_cfa_offset 24
 3146 0004 00AF     		add	r7, sp, #0
 3147              	.LCFI123:
 3148              		.cfi_def_cfa_register 7
 3149 0006 7860     		str	r0, [r7, #4]
2241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0U;
 3150              		.loc 1 2241 12
 3151 0008 0023     		movs	r3, #0
 3152 000a FB60     		str	r3, [r7, #12]
2242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0U;
 3153              		.loc 1 2242 17
 3154 000c 0023     		movs	r3, #0
 3155 000e BB60     		str	r3, [r7, #8]
2243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
2245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* enabling phase not yet completed: flag ADC ready not yet set).           */
2246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
2247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* causes: ADC clock not running, ...).                                     */
2248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
 3156              		.loc 1 2248 7
 3157 0010 7B68     		ldr	r3, [r7, #4]
 3158 0012 1B68     		ldr	r3, [r3]
 3159 0014 9B68     		ldr	r3, [r3, #8]
 3160 0016 03F00103 		and	r3, r3, #1
 3161              		.loc 1 2248 6
 3162 001a 012B     		cmp	r3, #1
 3163 001c 40D0     		beq	.L165
2249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable the Peripheral */
2251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
 3164              		.loc 1 2251 5
 3165 001e 7B68     		ldr	r3, [r7, #4]
 3166 0020 1B68     		ldr	r3, [r3]
 3167 0022 9A68     		ldr	r2, [r3, #8]
 3168 0024 7B68     		ldr	r3, [r7, #4]
 3169 0026 1B68     		ldr	r3, [r3]
 3170 0028 42F00102 		orr	r2, r2, #1
 3171 002c 9A60     		str	r2, [r3, #8]
2252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
2253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Delay for ADC stabilization time */
2254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Compute number of CPU cycles to wait for */
2255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 3172              		.loc 1 2255 42
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 96


 3173 002e 1F4B     		ldr	r3, .L171
 3174 0030 1B68     		ldr	r3, [r3]
 3175 0032 1F4A     		ldr	r2, .L171+4
 3176 0034 A2FB0323 		umull	r2, r3, r2, r3
 3177 0038 9B0C     		lsrs	r3, r3, #18
 3178              		.loc 1 2255 21
 3179 003a BB60     		str	r3, [r7, #8]
2256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(wait_loop_index != 0U)
 3180              		.loc 1 2256 10
 3181 003c 02E0     		b	.L166
 3182              	.L167:
2257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
2258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       wait_loop_index--;
 3183              		.loc 1 2258 22
 3184 003e BB68     		ldr	r3, [r7, #8]
 3185 0040 013B     		subs	r3, r3, #1
 3186 0042 BB60     		str	r3, [r7, #8]
 3187              	.L166:
2256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(wait_loop_index != 0U)
 3188              		.loc 1 2256 27
 3189 0044 BB68     		ldr	r3, [r7, #8]
2256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(wait_loop_index != 0U)
 3190              		.loc 1 2256 10
 3191 0046 002B     		cmp	r3, #0
 3192 0048 F9D1     		bne	.L167
2259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
2260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
2261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Get tick count */
2262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tickstart = HAL_GetTick();
 3193              		.loc 1 2262 17
 3194 004a FFF7FEFF 		bl	HAL_GetTick
 3195 004e F860     		str	r0, [r7, #12]
2263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Wait for ADC effectively enabled */
2265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(ADC_IS_ENABLE(hadc) == RESET)
 3196              		.loc 1 2265 10
 3197 0050 1FE0     		b	.L168
 3198              	.L170:
2266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
2267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 3199              		.loc 1 2267 11
 3200 0052 FFF7FEFF 		bl	HAL_GetTick
 3201 0056 0246     		mov	r2, r0
 3202              		.loc 1 2267 25
 3203 0058 FB68     		ldr	r3, [r7, #12]
 3204 005a D31A     		subs	r3, r2, r3
 3205              		.loc 1 2267 9
 3206 005c 022B     		cmp	r3, #2
 3207 005e 18D9     		bls	.L168
2268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
2269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* New check to avoid false timeout detection in case of preemption */
2270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if(ADC_IS_ENABLE(hadc) == RESET)
 3208              		.loc 1 2270 12
 3209 0060 7B68     		ldr	r3, [r7, #4]
 3210 0062 1B68     		ldr	r3, [r3]
 3211 0064 9B68     		ldr	r3, [r3, #8]
 3212 0066 03F00103 		and	r3, r3, #1
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 97


 3213              		.loc 1 2270 11
 3214 006a 012B     		cmp	r3, #1
 3215 006c 11D0     		beq	.L168
2271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
2272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Update ADC state machine to error */
2273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 3216              		.loc 1 2273 11
 3217 006e 7B68     		ldr	r3, [r7, #4]
 3218 0070 9B6A     		ldr	r3, [r3, #40]
 3219 0072 43F01002 		orr	r2, r3, #16
 3220 0076 7B68     		ldr	r3, [r7, #4]
 3221 0078 9A62     		str	r2, [r3, #40]
2274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Set ADC error code to ADC IP internal error */
2276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 3222              		.loc 1 2276 11
 3223 007a 7B68     		ldr	r3, [r7, #4]
 3224 007c DB6A     		ldr	r3, [r3, #44]
 3225 007e 43F00102 		orr	r2, r3, #1
 3226 0082 7B68     		ldr	r3, [r7, #4]
 3227 0084 DA62     		str	r2, [r3, #44]
2277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Process unlocked */
2279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           __HAL_UNLOCK(hadc);
 3228              		.loc 1 2279 11
 3229 0086 7B68     		ldr	r3, [r7, #4]
 3230 0088 0022     		movs	r2, #0
 3231 008a 83F82420 		strb	r2, [r3, #36]
2280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           return HAL_ERROR;
 3232              		.loc 1 2281 18
 3233 008e 0123     		movs	r3, #1
 3234 0090 07E0     		b	.L169
 3235              	.L168:
2265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 3236              		.loc 1 2265 11
 3237 0092 7B68     		ldr	r3, [r7, #4]
 3238 0094 1B68     		ldr	r3, [r3]
 3239 0096 9B68     		ldr	r3, [r3, #8]
 3240 0098 03F00103 		and	r3, r3, #1
2265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 3241              		.loc 1 2265 10
 3242 009c 012B     		cmp	r3, #1
 3243 009e D8D1     		bne	.L170
 3244              	.L165:
2282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
2283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
2284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
2285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    
2287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return HAL status */
2288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
 3245              		.loc 1 2288 10
 3246 00a0 0023     		movs	r3, #0
 3247              	.L169:
2289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3248              		.loc 1 2289 1
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 98


 3249 00a2 1846     		mov	r0, r3
 3250 00a4 1037     		adds	r7, r7, #16
 3251              	.LCFI124:
 3252              		.cfi_def_cfa_offset 8
 3253 00a6 BD46     		mov	sp, r7
 3254              	.LCFI125:
 3255              		.cfi_def_cfa_register 13
 3256              		@ sp needed
 3257 00a8 80BD     		pop	{r7, pc}
 3258              	.L172:
 3259 00aa 00BF     		.align	2
 3260              	.L171:
 3261 00ac 00000000 		.word	SystemCoreClock
 3262 00b0 83DE1B43 		.word	1125899907
 3263              		.cfi_endproc
 3264              	.LFE87:
 3266              		.section	.text.ADC_ConversionStop_Disable,"ax",%progbits
 3267              		.align	1
 3268              		.global	ADC_ConversionStop_Disable
 3269              		.syntax unified
 3270              		.thumb
 3271              		.thumb_func
 3273              	ADC_ConversionStop_Disable:
 3274              	.LFB88:
2290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Stop ADC conversion and disable the selected ADC
2293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
2294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         stopped to disable the ADC.
2295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
2296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status.
2297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
2299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 3275              		.loc 1 2299 1
 3276              		.cfi_startproc
 3277              		@ args = 0, pretend = 0, frame = 16
 3278              		@ frame_needed = 1, uses_anonymous_args = 0
 3279 0000 80B5     		push	{r7, lr}
 3280              	.LCFI126:
 3281              		.cfi_def_cfa_offset 8
 3282              		.cfi_offset 7, -8
 3283              		.cfi_offset 14, -4
 3284 0002 84B0     		sub	sp, sp, #16
 3285              	.LCFI127:
 3286              		.cfi_def_cfa_offset 24
 3287 0004 00AF     		add	r7, sp, #0
 3288              	.LCFI128:
 3289              		.cfi_def_cfa_register 7
 3290 0006 7860     		str	r0, [r7, #4]
2300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0U;
 3291              		.loc 1 2300 12
 3292 0008 0023     		movs	r3, #0
 3293 000a FB60     		str	r3, [r7, #12]
2301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Verification if ADC is not already disabled */
2303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) != RESET)
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 99


 3294              		.loc 1 2303 7
 3295 000c 7B68     		ldr	r3, [r7, #4]
 3296 000e 1B68     		ldr	r3, [r3]
 3297 0010 9B68     		ldr	r3, [r3, #8]
 3298 0012 03F00103 		and	r3, r3, #1
 3299              		.loc 1 2303 6
 3300 0016 012B     		cmp	r3, #1
 3301 0018 2ED1     		bne	.L174
2304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable the ADC peripheral */
2306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_DISABLE(hadc);
 3302              		.loc 1 2306 5
 3303 001a 7B68     		ldr	r3, [r7, #4]
 3304 001c 1B68     		ldr	r3, [r3]
 3305 001e 9A68     		ldr	r2, [r3, #8]
 3306 0020 7B68     		ldr	r3, [r7, #4]
 3307 0022 1B68     		ldr	r3, [r3]
 3308 0024 22F00102 		bic	r2, r2, #1
 3309 0028 9A60     		str	r2, [r3, #8]
2307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      
2308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Get tick count */
2309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tickstart = HAL_GetTick();
 3310              		.loc 1 2309 17
 3311 002a FFF7FEFF 		bl	HAL_GetTick
 3312 002e F860     		str	r0, [r7, #12]
2310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
2311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Wait for ADC effectively disabled */
2312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(ADC_IS_ENABLE(hadc) != RESET)
 3313              		.loc 1 2312 10
 3314 0030 1BE0     		b	.L175
 3315              	.L177:
2313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
2314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 3316              		.loc 1 2314 11
 3317 0032 FFF7FEFF 		bl	HAL_GetTick
 3318 0036 0246     		mov	r2, r0
 3319              		.loc 1 2314 25
 3320 0038 FB68     		ldr	r3, [r7, #12]
 3321 003a D31A     		subs	r3, r2, r3
 3322              		.loc 1 2314 9
 3323 003c 022B     		cmp	r3, #2
 3324 003e 14D9     		bls	.L175
2315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
2316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* New check to avoid false timeout detection in case of preemption */
2317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if(ADC_IS_ENABLE(hadc) != RESET)
 3325              		.loc 1 2317 12
 3326 0040 7B68     		ldr	r3, [r7, #4]
 3327 0042 1B68     		ldr	r3, [r3]
 3328 0044 9B68     		ldr	r3, [r3, #8]
 3329 0046 03F00103 		and	r3, r3, #1
 3330              		.loc 1 2317 11
 3331 004a 012B     		cmp	r3, #1
 3332 004c 0DD1     		bne	.L175
2318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
2319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Update ADC state machine to error */
2320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 3333              		.loc 1 2320 11
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 100


 3334 004e 7B68     		ldr	r3, [r7, #4]
 3335 0050 9B6A     		ldr	r3, [r3, #40]
 3336 0052 43F01002 		orr	r2, r3, #16
 3337 0056 7B68     		ldr	r3, [r7, #4]
 3338 0058 9A62     		str	r2, [r3, #40]
2321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Set ADC error code to ADC IP internal error */
2323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 3339              		.loc 1 2323 11
 3340 005a 7B68     		ldr	r3, [r7, #4]
 3341 005c DB6A     		ldr	r3, [r3, #44]
 3342 005e 43F00102 		orr	r2, r3, #1
 3343 0062 7B68     		ldr	r3, [r7, #4]
 3344 0064 DA62     		str	r2, [r3, #44]
2324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           return HAL_ERROR;
 3345              		.loc 1 2325 18
 3346 0066 0123     		movs	r3, #1
 3347 0068 07E0     		b	.L176
 3348              	.L175:
2312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 3349              		.loc 1 2312 11
 3350 006a 7B68     		ldr	r3, [r7, #4]
 3351 006c 1B68     		ldr	r3, [r3]
 3352 006e 9B68     		ldr	r3, [r3, #8]
 3353 0070 03F00103 		and	r3, r3, #1
2312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 3354              		.loc 1 2312 10
 3355 0074 012B     		cmp	r3, #1
 3356 0076 DCD0     		beq	.L177
 3357              	.L174:
2326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
2327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
2328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
2329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return HAL status */
2332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
 3358              		.loc 1 2332 10
 3359 0078 0023     		movs	r3, #0
 3360              	.L176:
2333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3361              		.loc 1 2333 1
 3362 007a 1846     		mov	r0, r3
 3363 007c 1037     		adds	r7, r7, #16
 3364              	.LCFI129:
 3365              		.cfi_def_cfa_offset 8
 3366 007e BD46     		mov	sp, r7
 3367              	.LCFI130:
 3368              		.cfi_def_cfa_register 13
 3369              		@ sp needed
 3370 0080 80BD     		pop	{r7, pc}
 3371              		.cfi_endproc
 3372              	.LFE88:
 3374              		.section	.text.ADC_DMAConvCplt,"ax",%progbits
 3375              		.align	1
 3376              		.global	ADC_DMAConvCplt
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 101


 3377              		.syntax unified
 3378              		.thumb
 3379              		.thumb_func
 3381              	ADC_DMAConvCplt:
 3382              	.LFB89:
2334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  DMA transfer complete callback. 
2337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
2338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
2339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
2341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 3383              		.loc 1 2341 1
 3384              		.cfi_startproc
 3385              		@ args = 0, pretend = 0, frame = 16
 3386              		@ frame_needed = 1, uses_anonymous_args = 0
 3387 0000 80B5     		push	{r7, lr}
 3388              	.LCFI131:
 3389              		.cfi_def_cfa_offset 8
 3390              		.cfi_offset 7, -8
 3391              		.cfi_offset 14, -4
 3392 0002 84B0     		sub	sp, sp, #16
 3393              	.LCFI132:
 3394              		.cfi_def_cfa_offset 24
 3395 0004 00AF     		add	r7, sp, #0
 3396              	.LCFI133:
 3397              		.cfi_def_cfa_register 7
 3398 0006 7860     		str	r0, [r7, #4]
2342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3399              		.loc 1 2343 22
 3400 0008 7B68     		ldr	r3, [r7, #4]
 3401 000a 5B6A     		ldr	r3, [r3, #36]
 3402 000c FB60     		str	r3, [r7, #12]
2344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  
2345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Update state machine on conversion status if not in error state */
2346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 3403              		.loc 1 2346 7
 3404 000e FB68     		ldr	r3, [r7, #12]
 3405 0010 9B6A     		ldr	r3, [r3, #40]
 3406 0012 03F05003 		and	r3, r3, #80
 3407              		.loc 1 2346 6
 3408 0016 002B     		cmp	r3, #0
 3409 0018 27D1     		bne	.L179
2347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC state machine */
2349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 3410              		.loc 1 2349 5
 3411 001a FB68     		ldr	r3, [r7, #12]
 3412 001c 9B6A     		ldr	r3, [r3, #40]
 3413 001e 43F40072 		orr	r2, r3, #512
 3414 0022 FB68     		ldr	r3, [r7, #12]
 3415 0024 9A62     		str	r2, [r3, #40]
2350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
2351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
2352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.        */
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 102


2353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Note: On STM32F1 devices, in case of sequencer enabled                 */
2354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       (several ranks selected), end of conversion flag is raised       */
2355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       at the end of the sequence.                                      */
2356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 3416              		.loc 1 2356 8
 3417 0026 FB68     		ldr	r3, [r7, #12]
 3418 0028 1B68     		ldr	r3, [r3]
 3419 002a 9B68     		ldr	r3, [r3, #8]
 3420 002c 03F46023 		and	r3, r3, #917504
 3421              		.loc 1 2356 7
 3422 0030 B3F5602F 		cmp	r3, #917504
 3423 0034 15D1     		bne	.L180
2357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 3424              		.loc 1 2357 19 discriminator 1
 3425 0036 FB68     		ldr	r3, [r7, #12]
 3426 0038 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
2356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 3427              		.loc 1 2356 51 discriminator 1
 3428 003a 002B     		cmp	r3, #0
 3429 003c 11D1     		bne	.L180
2358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
2359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state */
2360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 3430              		.loc 1 2360 7
 3431 003e FB68     		ldr	r3, [r7, #12]
 3432 0040 9B6A     		ldr	r3, [r3, #40]
 3433 0042 23F48072 		bic	r2, r3, #256
 3434 0046 FB68     		ldr	r3, [r7, #12]
 3435 0048 9A62     		str	r2, [r3, #40]
2361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
2362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 3436              		.loc 1 2362 11
 3437 004a FB68     		ldr	r3, [r7, #12]
 3438 004c 9B6A     		ldr	r3, [r3, #40]
 3439 004e 03F48053 		and	r3, r3, #4096
 3440              		.loc 1 2362 10
 3441 0052 002B     		cmp	r3, #0
 3442 0054 05D1     		bne	.L180
2363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
2364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 3443              		.loc 1 2364 9
 3444 0056 FB68     		ldr	r3, [r7, #12]
 3445 0058 9B6A     		ldr	r3, [r3, #40]
 3446 005a 43F00102 		orr	r2, r3, #1
 3447 005e FB68     		ldr	r3, [r7, #12]
 3448 0060 9A62     		str	r2, [r3, #40]
 3449              	.L180:
2365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
2366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
2367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
2368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Conversion complete callback */
2369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->ConvCpltCallback(hadc);
2371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #else
2372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
 3450              		.loc 1 2372 5
 3451 0062 F868     		ldr	r0, [r7, #12]
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 103


 3452 0064 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
2373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
2376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Call DMA error callback */
2378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->DMA_Handle->XferErrorCallback(hdma);
2379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3453              		.loc 1 2380 1
 3454 0068 04E0     		b	.L182
 3455              	.L179:
2378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 3456              		.loc 1 2378 9
 3457 006a FB68     		ldr	r3, [r7, #12]
 3458 006c 1B6A     		ldr	r3, [r3, #32]
2378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 3459              		.loc 1 2378 21
 3460 006e 1B6B     		ldr	r3, [r3, #48]
2378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 3461              		.loc 1 2378 5
 3462 0070 7868     		ldr	r0, [r7, #4]
 3463 0072 9847     		blx	r3
 3464              	.LVL0:
 3465              	.L182:
 3466              		.loc 1 2380 1
 3467 0074 00BF     		nop
 3468 0076 1037     		adds	r7, r7, #16
 3469              	.LCFI134:
 3470              		.cfi_def_cfa_offset 8
 3471 0078 BD46     		mov	sp, r7
 3472              	.LCFI135:
 3473              		.cfi_def_cfa_register 13
 3474              		@ sp needed
 3475 007a 80BD     		pop	{r7, pc}
 3476              		.cfi_endproc
 3477              	.LFE89:
 3479              		.section	.text.ADC_DMAHalfConvCplt,"ax",%progbits
 3480              		.align	1
 3481              		.global	ADC_DMAHalfConvCplt
 3482              		.syntax unified
 3483              		.thumb
 3484              		.thumb_func
 3486              	ADC_DMAHalfConvCplt:
 3487              	.LFB90:
2381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  DMA half transfer complete callback. 
2384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
2385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
2386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
2388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 3488              		.loc 1 2388 1
 3489              		.cfi_startproc
 3490              		@ args = 0, pretend = 0, frame = 16
 3491              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 104


 3492 0000 80B5     		push	{r7, lr}
 3493              	.LCFI136:
 3494              		.cfi_def_cfa_offset 8
 3495              		.cfi_offset 7, -8
 3496              		.cfi_offset 14, -4
 3497 0002 84B0     		sub	sp, sp, #16
 3498              	.LCFI137:
 3499              		.cfi_def_cfa_offset 24
 3500 0004 00AF     		add	r7, sp, #0
 3501              	.LCFI138:
 3502              		.cfi_def_cfa_register 7
 3503 0006 7860     		str	r0, [r7, #4]
2389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3504              		.loc 1 2390 22
 3505 0008 7B68     		ldr	r3, [r7, #4]
 3506 000a 5B6A     		ldr	r3, [r3, #36]
 3507 000c FB60     		str	r3, [r7, #12]
2391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Half conversion callback */
2393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->ConvHalfCpltCallback(hadc);
2395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #else
2396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_ADC_ConvHalfCpltCallback(hadc);
 3508              		.loc 1 2396 3
 3509 000e F868     		ldr	r0, [r7, #12]
 3510 0010 FFF7FEFF 		bl	HAL_ADC_ConvHalfCpltCallback
2397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3511              		.loc 1 2398 1
 3512 0014 00BF     		nop
 3513 0016 1037     		adds	r7, r7, #16
 3514              	.LCFI139:
 3515              		.cfi_def_cfa_offset 8
 3516 0018 BD46     		mov	sp, r7
 3517              	.LCFI140:
 3518              		.cfi_def_cfa_register 13
 3519              		@ sp needed
 3520 001a 80BD     		pop	{r7, pc}
 3521              		.cfi_endproc
 3522              	.LFE90:
 3524              		.section	.text.ADC_DMAError,"ax",%progbits
 3525              		.align	1
 3526              		.global	ADC_DMAError
 3527              		.syntax unified
 3528              		.thumb
 3529              		.thumb_func
 3531              	ADC_DMAError:
 3532              	.LFB91:
2399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  DMA error callback 
2402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
2403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
2404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** void ADC_DMAError(DMA_HandleTypeDef *hdma)   
2406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 105


 3533              		.loc 1 2406 1
 3534              		.cfi_startproc
 3535              		@ args = 0, pretend = 0, frame = 16
 3536              		@ frame_needed = 1, uses_anonymous_args = 0
 3537 0000 80B5     		push	{r7, lr}
 3538              	.LCFI141:
 3539              		.cfi_def_cfa_offset 8
 3540              		.cfi_offset 7, -8
 3541              		.cfi_offset 14, -4
 3542 0002 84B0     		sub	sp, sp, #16
 3543              	.LCFI142:
 3544              		.cfi_def_cfa_offset 24
 3545 0004 00AF     		add	r7, sp, #0
 3546              	.LCFI143:
 3547              		.cfi_def_cfa_register 7
 3548 0006 7860     		str	r0, [r7, #4]
2407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3549              		.loc 1 2408 22
 3550 0008 7B68     		ldr	r3, [r7, #4]
 3551 000a 5B6A     		ldr	r3, [r3, #36]
 3552 000c FB60     		str	r3, [r7, #12]
2409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set ADC state */
2411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 3553              		.loc 1 2411 3
 3554 000e FB68     		ldr	r3, [r7, #12]
 3555 0010 9B6A     		ldr	r3, [r3, #40]
 3556 0012 43F04002 		orr	r2, r3, #64
 3557 0016 FB68     		ldr	r3, [r7, #12]
 3558 0018 9A62     		str	r2, [r3, #40]
2412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set ADC error code to DMA error */
2414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 3559              		.loc 1 2414 3
 3560 001a FB68     		ldr	r3, [r7, #12]
 3561 001c DB6A     		ldr	r3, [r3, #44]
 3562 001e 43F00402 		orr	r2, r3, #4
 3563 0022 FB68     		ldr	r3, [r7, #12]
 3564 0024 DA62     		str	r2, [r3, #44]
2415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Error callback */
2417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   hadc->ErrorCallback(hadc);
2419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #else
2420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_ADC_ErrorCallback(hadc);
 3565              		.loc 1 2420 3
 3566 0026 F868     		ldr	r0, [r7, #12]
 3567 0028 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
2421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3568              		.loc 1 2422 1
 3569 002c 00BF     		nop
 3570 002e 1037     		adds	r7, r7, #16
 3571              	.LCFI144:
 3572              		.cfi_def_cfa_offset 8
 3573 0030 BD46     		mov	sp, r7
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 106


 3574              	.LCFI145:
 3575              		.cfi_def_cfa_register 13
 3576              		@ sp needed
 3577 0032 80BD     		pop	{r7, pc}
 3578              		.cfi_endproc
 3579              	.LFE91:
 3581              		.text
 3582              	.Letext0:
 3583              		.file 2 "d:\\3.tools\\arm_gcc_toolchain\\arm-none-eabi\\include\\machine\\_default_types.h"
 3584              		.file 3 "d:\\3.tools\\arm_gcc_toolchain\\arm-none-eabi\\include\\sys\\_stdint.h"
 3585              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 3586              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 3587              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 3588              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 3589              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 3590              		.file 9 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 107


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f1xx_hal_adc.c
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:18     .text.HAL_ADC_Init:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:24     .text.HAL_ADC_Init:00000000 HAL_ADC_Init
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:550    .text.HAL_ADC_MspInit:00000000 HAL_ADC_MspInit
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:3273   .text.ADC_ConversionStop_Disable:00000000 ADC_ConversionStop_Disable
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:307    .text.HAL_ADC_Init:000001a8 $d
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:313    .text.HAL_ADC_DeInit:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:319    .text.HAL_ADC_DeInit:00000000 HAL_ADC_DeInit
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:592    .text.HAL_ADC_MspDeInit:00000000 HAL_ADC_MspDeInit
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:538    .text.HAL_ADC_DeInit:0000017c $d
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:544    .text.HAL_ADC_MspInit:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:586    .text.HAL_ADC_MspDeInit:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:628    .text.HAL_ADC_Start:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:634    .text.HAL_ADC_Start:00000000 HAL_ADC_Start
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:3132   .text.ADC_Enable:00000000 ADC_Enable
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:850    .text.HAL_ADC_Start:00000154 $d
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:856    .text.HAL_ADC_Stop:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:862    .text.HAL_ADC_Stop:00000000 HAL_ADC_Stop
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:935    .text.HAL_ADC_PollForConversion:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:941    .text.HAL_ADC_PollForConversion:00000000 HAL_ADC_PollForConversion
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:1274   .text.HAL_ADC_PollForConversion:000001f4 $d
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:1284   .text.HAL_ADC_PollForEvent:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:1290   .text.HAL_ADC_PollForEvent:00000000 HAL_ADC_PollForEvent
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:1400   .text.HAL_ADC_Start_IT:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:1406   .text.HAL_ADC_Start_IT:00000000 HAL_ADC_Start_IT
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:1630   .text.HAL_ADC_Start_IT:00000164 $d
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:1636   .text.HAL_ADC_Stop_IT:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:1642   .text.HAL_ADC_Stop_IT:00000000 HAL_ADC_Stop_IT
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:1723   .text.HAL_ADC_Start_DMA:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:1729   .text.HAL_ADC_Start_DMA:00000000 HAL_ADC_Start_DMA
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:2001   .text.HAL_ADC_Start_DMA:000001a8 $d
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:3381   .text.ADC_DMAConvCplt:00000000 ADC_DMAConvCplt
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:3486   .text.ADC_DMAHalfConvCplt:00000000 ADC_DMAHalfConvCplt
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:3531   .text.ADC_DMAError:00000000 ADC_DMAError
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:2010   .text.HAL_ADC_Stop_DMA:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:2016   .text.HAL_ADC_Stop_DMA:00000000 HAL_ADC_Stop_DMA
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:2124   .text.HAL_ADC_GetValue:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:2130   .text.HAL_ADC_GetValue:00000000 HAL_ADC_GetValue
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:2171   .text.HAL_ADC_IRQHandler:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:2177   .text.HAL_ADC_IRQHandler:00000000 HAL_ADC_IRQHandler
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:2425   .text.HAL_ADC_ConvCpltCallback:00000000 HAL_ADC_ConvCpltCallback
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:2509   .text.HAL_ADC_LevelOutOfWindowCallback:00000000 HAL_ADC_LevelOutOfWindowCallback
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:2419   .text.HAL_ADC_ConvCpltCallback:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:2461   .text.HAL_ADC_ConvHalfCpltCallback:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:2467   .text.HAL_ADC_ConvHalfCpltCallback:00000000 HAL_ADC_ConvHalfCpltCallback
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:2503   .text.HAL_ADC_LevelOutOfWindowCallback:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:2545   .text.HAL_ADC_ErrorCallback:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:2551   .text.HAL_ADC_ErrorCallback:00000000 HAL_ADC_ErrorCallback
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:2587   .text.HAL_ADC_ConfigChannel:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:2593   .text.HAL_ADC_ConfigChannel:00000000 HAL_ADC_ConfigChannel
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:2894   .text.HAL_ADC_ConfigChannel:000001e4 $d
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:2901   .text.HAL_ADC_AnalogWDGConfig:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:2907   .text.HAL_ADC_AnalogWDGConfig:00000000 HAL_ADC_AnalogWDGConfig
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:3029   .text.HAL_ADC_AnalogWDGConfig:000000a0 $d
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:3036   .text.HAL_ADC_GetState:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:3042   .text.HAL_ADC_GetState:00000000 HAL_ADC_GetState
ARM GAS  C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s 			page 108


C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:3081   .text.HAL_ADC_GetError:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:3087   .text.HAL_ADC_GetError:00000000 HAL_ADC_GetError
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:3126   .text.ADC_Enable:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:3261   .text.ADC_Enable:000000ac $d
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:3267   .text.ADC_ConversionStop_Disable:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:3375   .text.ADC_DMAConvCplt:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:3480   .text.ADC_DMAHalfConvCplt:00000000 $t
C:\Users\jisu8\AppData\Local\Temp\cctr1vrp.s:3525   .text.ADC_DMAError:00000000 $t

UNDEFINED SYMBOLS
HAL_GetTick
HAL_RCCEx_GetPeriphCLKFreq
SystemCoreClock
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_ADCEx_InjectedConvCpltCallback
